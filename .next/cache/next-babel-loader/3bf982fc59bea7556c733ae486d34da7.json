{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport { RoomContext } from '../context';\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport RSC from 'react-scrollbars-custom';\nexport default class ChatInstance extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'https://express-login.now.sh/chat/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        return currentUser.subscribeToRoom({\n          roomId: this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              if (Object.keys(this.state.currentRoom).length > 0) {\n                this.setState({\n                  messages: [...this.state.messages, message],\n                  scrollHeight: document.getElementById(`${this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '')}`).clientHeight\n                });\n              } else {\n                this.setState({\n                  messages: [...this.state.messages, message]\n                });\n              }\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(room => {\n        this.setState({\n          currentRoom: room\n        });\n      }).then(() => {\n        this.setState({\n          scrollHeight: document.getElementById(`${this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '')}`).clientHeight\n        });\n      }).catch(error => console.log('Hiiiii', error));\n    });\n\n    _defineProperty(this, \"sendMessage\", text => {\n      this.setState({\n        text: ''\n      });\n      this.state.currentUser.sendSimpleMessage({\n        roomId: this.state.currentRoom.id,\n        text\n      }).then().catch(err => {\n        console.log('error', err);\n        this.setState({\n          text\n        });\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", event => {\n      event.preventDefault();\n      this.sendMessage(this.state.text);\n    });\n\n    _defineProperty(this, \"onEnterPress\", e => {\n      if (e.keyCode == 13 && e.shiftKey == false) {\n        this.onSubmit(e);\n      }\n    });\n\n    _defineProperty(this, \"onCursor\", () => {\n      const cursor = this.state.currentUser.readCursor({\n        roomId: this.state.currentRoom.id\n      });\n      console.log(cursor);\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false,\n      text: '',\n      scrollHeight: 0\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"\n    }, __jsx(\"div\", {\n      className: \"chat-messages\"\n    }, __jsx(RSC, {\n      scrollTop: this.state.scrollHeight\n    }, __jsx(\"ul\", {\n      id: this.state.currentRoom.createdAt ? this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '') : \"\"\n    }, this.state.messages.map((message, index) => {\n      const rawId = message.senderId;\n      const Id = rawId.slice(20, rawId.length);\n      return __jsx(\"li\", {\n        className: this.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\",\n        key: index\n      }, __jsx(\"div\", {\n        className: \"chat-msg\"\n      }, __jsx(\"div\", {\n        className: \"avatar\",\n        onClick: this.onCursor\n      }, this.state.currentUser.id == message.senderId ? message.senderId[0] : Id[0]), __jsx(\"div\", {\n        className: \"msg-content\"\n      }, __jsx(\"span\", null, this.state.currentUser.id == message.senderId ? message.senderId : Id), __jsx(\"p\", null, message.text))));\n    })))), __jsx(\"div\", {\n      className: \"chat-input-text\"\n    }, __jsx(\"form\", {\n      onSubmit: this.onSubmit\n    }, __jsx(\"textarea\", {\n      onKeyDown: this.onEnterPress,\n      className: \"hidescroll\",\n      name: \"text\",\n      placeholder: \"Your text...\",\n      onChange: this.handleChange,\n      value: this.state.text,\n      autoComplete: \"off\",\n      wrap: \"hard\"\n    }), __jsx(\"div\", {\n      className: \"button-container\"\n    }, __jsx(\"button\", {\n      type: \"submit\"\n    }, __jsx(FaPaperPlane, null))))));\n  }\n\n}\n\n_defineProperty(ChatInstance, \"contextType\", RoomContext);","map":null,"metadata":{},"sourceType":"module"}