{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport TypingIndicator from './TypingIndicator';\nexport default class ChatScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      console.log('mounted', this.props.currentUsername);\n      console.log('mounted', this.props.userId);\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: this.props.userId,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        console.log(currentUser);\n        return currentUser.createRoom({\n          id: `${currentUser.id}-room`,\n          name: `${currentUser.id}-room`,\n          private: true,\n          addUserIds: [currentUser.id, 'guido']\n        }).then(room => {\n          this.setState({\n            currentRoom: room\n          });\n          console.log(currentUser);\n        }).catch(err => {\n          console.log('error', err);\n        }); // return currentUser.subscribeToRoom({\n        //     roomId: 'eadf4af7-69ff-4a59-9dc1-d4c4adcafde4',\n        //     messageLimit: 100,\n        //     hooks: {\n        //         onMessage: (message) => {\n        //             console.log(message)\n        //             this.setState({\n        //                 messages: [...this.state.messages, message]\n        //             })\n        //         },\n        //         onUserStartedTyping: user => {\n        //             this.setState({\n        //                 userTyping: user.name,\n        //                 isUserTyping: true\n        //             })\n        //         },\n        //         onUserStoppedTyping: user => {\n        //             this.setState({\n        //                 userTyping: user.name,\n        //                 isUserTyping: false\n        //             })\n        //         }\n        //     }\n        // })\n      }).catch(error => console.log('Hiiiii', error));\n    });\n\n    _defineProperty(this, \"sendMessage\", text => {\n      this.state.currentUser.sendSimpleMessage({\n        roomId: this.state.currentRoom.id,\n        text\n      }).then(messageId => console.log('sent', messageId)).catch(err => console.log('error', err));\n    });\n\n    _defineProperty(this, \"sendTypingEvent\", () => {\n      this.state.currentUser.isTypingIn({\n        roomId: this.state.currentRoom.id\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Hello \", this.props.currentUsername, __jsx(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), this.state.isUserTyping ? __jsx(TypingIndicator, {\n      userTyping: this.state.userTyping,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }) : '', __jsx(SendMessageForm, {\n      onSubmit: this.sendMessage,\n      onChange: this.sendTypingEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js"],"names":["React","Component","Chatkit","MessageList","SendMessageForm","TypingIndicator","ChatScreen","constructor","props","console","log","currentUsername","userId","chatManager","ChatManager","instanceLocator","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","createRoom","id","name","private","addUserIds","room","currentRoom","catch","err","error","text","state","sendSimpleMessage","roomId","messageId","isTypingIn","messages","userTyping","isUserTyping","render","sendMessage","sendTypingEvent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n//Components\nimport MessageList from './MessageList'\nimport SendMessageForm from './SendMessageForm'\nimport TypingIndicator from './TypingIndicator'\n\nexport default class ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        console.log('mounted', this.props.currentUsername);\n        console.log('mounted', this.props.userId);\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: this.props.userId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                console.log(currentUser)\n\n                return currentUser.createRoom({\n                    id: `${currentUser.id}-room`,\n                    name: `${currentUser.id}-room`,\n                    private: true,\n                    addUserIds: [currentUser.id, 'guido']\n                }).then(room => {\n                    this.setState({ currentRoom: room })\n                    console.log(currentUser);\n                }).catch(err => {\n                    console.log('error', err)\n                })\n\n                // return currentUser.subscribeToRoom({\n                //     roomId: 'eadf4af7-69ff-4a59-9dc1-d4c4adcafde4',\n                //     messageLimit: 100,\n                //     hooks: {\n                //         onMessage: (message) => {\n                //             console.log(message)\n                //             this.setState({\n                //                 messages: [...this.state.messages, message]\n                //             })\n                //         },\n                //         onUserStartedTyping: user => {\n                //             this.setState({\n                //                 userTyping: user.name,\n                //                 isUserTyping: true\n                //             })\n                //         },\n                //         onUserStoppedTyping: user => {\n                //             this.setState({\n                //                 userTyping: user.name,\n                //                 isUserTyping: false\n                //             })\n                //         }\n                //     }\n                // })\n            })\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then(messageId => console.log('sent', messageId))\n        .catch(err => console.log('error', err))\n    }\n\n    sendTypingEvent = () => {\n        this.state.currentUser.isTypingIn({\n            roomId: this.state.currentRoom.id\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                Hello {this.props.currentUsername}\n                <MessageList messages={this.state.messages}/>\n                { this.state.isUserTyping ? <TypingIndicator userTyping={this.state.userTyping} /> : '' }\n                <SendMessageForm onSubmit={this.sendMessage} onChange={this.sendTypingEvent} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}