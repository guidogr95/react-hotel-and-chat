{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useContext, useEffect } from 'react';\nimport chatImg from '../images/chat.jpg';\nimport loading from '../images/gif/loading-arrow.gif';\nimport axios from 'axios';\nimport { RoomContext } from '../context';\nimport Link from 'next/link';\nimport Chatkit from '@pusher/chatkit-client';\nimport ChatList from '../components/ChatList';\nimport ChatBoard from '../components/ChatBoard';\nexport default function chat() {\n  var context = useContext(RoomContext);\n\n  var _useState = useState({}),\n      input = _useState[0],\n      setInput = _useState[1];\n\n  var _useState2 = useState(false),\n      btnDisabled = _useState2[0],\n      setbtnDisabled = _useState2[1];\n\n  var _useState3 = useState({}),\n      errors = _useState3[0],\n      setErrors = _useState3[1];\n\n  var _useState4 = useState(null),\n      currentUser = _useState4[0],\n      setCurrentUser = _useState4[1];\n\n  var _useState5 = useState({}),\n      currentRoom = _useState5[0],\n      setCurrentRoom = _useState5[1];\n\n  var _useState6 = useState(0),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  var style = {\n    minHeight: 600,\n    width: \"100%\",\n    padding: \"50px 0 50px 0\"\n  };\n\n  var handleChange = function handleChange(event) {\n    return setInput(_objectSpread({}, input, _defineProperty({}, event.target.name, event.target.value)));\n  };\n\n  var useForceUpdate = function useForceUpdate() {\n    setValue(Math.random());\n  };\n\n  useEffect(function () {\n    context.updateCredentials(true);\n  }, []);\n  useEffect(function () {\n    if (context.authenticated && context.authenticated !== null) {\n      handleChatSession();\n    } else {}\n  }, [context.authenticated]);\n\n  var handleSubmit = function handleSubmit(event) {\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            setbtnDisabled(true);\n            axios({\n              url: 'https://express-login.now.sh/api/users/login',\n              method: 'POST',\n              data: _JSON$stringify({\n                email: input.email,\n                password: input.password\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n              }\n            }).then(function (res) {\n              setbtnDisabled(false);\n              context.updateCredentials(false, res.data.userId, res.data.email, res.data.token);\n            })[\"catch\"](function (err) {\n              setErrors(_objectSpread({}, errors, {\n                error: \"No se pudo conectar. Revise sus credenciales\"\n              }));\n              setbtnDisabled(false);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var handleChatSession = function handleChatSession() {\n    var chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n      userId: context.chatUserId,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: 'https://express-login.now.sh/chat/authenticate'\n      })\n    });\n    chatManager.connect({\n      onAddedToRoom: function onAddedToRoom() {\n        useForceUpdate();\n      },\n      onRoomDeleted: function onRoomDeleted() {\n        useForceUpdate();\n      },\n      onPresenceChanged: function onPresenceChanged(state, user) {// console.log(`User ${user.name} is ${state.current}`)\n      }\n    }).then(function (currentUser) {\n      context.setCurrentUser(currentUser);\n      return currentUser.subscribeToRoom({\n        roomId: '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45',\n        messageLimit: 100,\n        hooks: {\n          onPresenceChanged: function onPresenceChanged(state, user) {// console.log(`User ${user.name} is ${state.current}`)\n          }\n        }\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    })[\"catch\"](function (error) {\n      return console.log('Hiiiii', error);\n    });\n  };\n\n  var renderForm = function renderForm() {\n    return __jsx(React.Fragment, null, __jsx(\"h3\", null, \"Welcome\"), _Object$values(errors).map(function (err, index) {\n      return __jsx(\"div\", {\n        key: index,\n        className: \"login-err\"\n      }, err);\n    }), __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(\"label\", {\n      htmlFor: \"email\"\n    }, \"Email\"), __jsx(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      onChange: handleChange\n    }), __jsx(\"label\", {\n      htmlFor: \"password\"\n    }, \"Password\"), __jsx(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      onChange: handleChange\n    }), __jsx(\"button\", {\n      disabled: btnDisabled,\n      className: btnDisabled ? \"btn-primary submit-btn disabled\" : \"btn-primary submit-btn\",\n      type: \"submit\"\n    }, btnDisabled ? __jsx(\"img\", {\n      className: \"loading-login\",\n      src: loading,\n      alt: \"loading spinner\"\n    }) : \"Enviar\")));\n  };\n\n  var renderLoggedin = function renderLoggedin() {\n    return __jsx(\"div\", {\n      className: \"signed\"\n    }, __jsx(\"h3\", null, \"You are logged in\"), __jsx(Link, {\n      href: \"/\"\n    }, __jsx(\"a\", {\n      className: \"btn-primary signed\"\n    }, \"Go Home\")), __jsx(Link, {\n      href: \"/admin\"\n    }, __jsx(\"a\", {\n      className: \"btn-primary signed\"\n    }, \"Admin Panel\")), __jsx(\"div\", {\n      className: \"chat-window\"\n    }, __jsx(ChatList, null), __jsx(ChatBoard, null)));\n  };\n\n  if (context.authenticated === null) {\n    return __jsx(\"div\", {\n      style: style\n    }, __jsx(\"div\", {\n      className: \"log-box loading\"\n    }, __jsx(\"img\", {\n      className: \"loading-spinner\",\n      src: loading,\n      alt: \"loading\"\n    })));\n  }\n\n  return __jsx(\"div\", {\n    style: style\n  }, __jsx(\"div\", {\n    className: \"log-box\"\n  }, context.authenticated ? renderLoggedin() : renderForm()));\n}","map":null,"metadata":{},"sourceType":"module"}