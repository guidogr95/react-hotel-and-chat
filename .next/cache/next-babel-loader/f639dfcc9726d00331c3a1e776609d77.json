{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nexport default class ChatInstance extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        console.log(currentUser);\n        console.log(this.props.roomInfo.id);\n        return currentUser.subscribeToRoom({\n          roomId: this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              console.log(message);\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(room => this.setState({\n        currentRoom: room\n      })).catch(error => console.log('Hiiiii', error));\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n  }\n\n  render() {\n    const {\n      roomInfo\n    } = this.props.roomInfo;\n    return __jsx(\"div\", {\n      className: \"chat-instance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.state.messages));\n  }\n\n}","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js"],"names":["Component","Chatkit","ChatInstance","constructor","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","console","log","roomInfo","id","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","messages","state","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","room","currentRoom","catch","error","render"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AAEA,eAAe,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AAChDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,+CAWC,MAAM;AACtB,YAAMC,WAAW,GAAG,IAAIJ,OAAO,CAACK,WAAZ,CAAwB;AACxCC,QAAAA,eAAe,EAAE,6CADuB;AAExCC,QAAAA,MAAM,EAAE,OAFgC;AAGxCC,QAAAA,aAAa,EAAE,IAAIR,OAAO,CAACS,aAAZ,CAA0B;AACrCC,UAAAA,GAAG,EAAE;AADgC,SAA1B;AAHyB,OAAxB,CAApB;AAQAN,MAAAA,WAAW,CACNO,OADL,GAEKC,IAFL,CAEUC,WAAW,IAAI;AACjB,aAAKC,QAAL,CAAc;AAACD,UAAAA;AAAD,SAAd;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWc,QAAX,CAAoBC,EAAhC;AACA,eAAOL,WAAW,CAACM,eAAZ,CAA4B;AAC/BC,UAAAA,MAAM,EAAE,KAAKjB,KAAL,CAAWc,QAAX,CAAoBC,EADG;AAE/BG,UAAAA,YAAY,EAAE,GAFiB;AAG/BC,UAAAA,KAAK,EAAE;AACHC,YAAAA,SAAS,EAAGC,OAAD,IAAa;AACpBT,cAAAA,OAAO,CAACC,GAAR,CAAYQ,OAAZ;AACA,mBAAKV,QAAL,CAAc;AACVW,gBAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,QAAf,EAAyBD,OAAzB;AADA,eAAd;AAGH,aANE;AAOHG,YAAAA,mBAAmB,EAAEC,IAAI,IAAI;AACzB,mBAAKd,QAAL,CAAc;AACVe,gBAAAA,UAAU,EAAED,IAAI,CAACE,IADP;AAEVC,gBAAAA,YAAY,EAAE;AAFJ,eAAd;AAIH,aAZE;AAaHC,YAAAA,mBAAmB,EAAEJ,IAAI,IAAI;AACzB,mBAAKd,QAAL,CAAc;AACVe,gBAAAA,UAAU,EAAED,IAAI,CAACE,IADP;AAEVC,gBAAAA,YAAY,EAAE;AAFJ,eAAd;AAIH;AAlBE;AAHwB,SAA5B,CAAP;AAwBH,OA9BL,EA+BKnB,IA/BL,CA+BUqB,IAAI,IAAI,KAAKnB,QAAL,CAAc;AAACoB,QAAAA,WAAW,EAACD;AAAb,OAAd,CA/BlB,EAgCKE,KAhCL,CAgCWC,KAAK,IAAIrB,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBoB,KAAtB,CAhCpB;AAiCH,KArDkB;;AAEf,SAAKV,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAE,EADD;AAETS,MAAAA,WAAW,EAAE,EAFJ;AAGTrB,MAAAA,WAAW,EAAE,EAHJ;AAITgB,MAAAA,UAAU,EAAE,EAJH;AAKTE,MAAAA,YAAY,EAAE;AALL,KAAb;AAOH;;AA8CDM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEpB,MAAAA;AAAF,QAAe,KAAKd,KAAL,CAAWc,QAAhC;AACA,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKS,KAAL,CAAWD,QAAf,CADJ,CADJ;AAKH;;AA/D+C","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n\nexport default class ChatInstance extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                console.log(currentUser)\n                console.log(this.props.roomInfo.id)\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => this.setState({currentRoom:room}))\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    render() {\n        const { roomInfo } = this.props.roomInfo\n        return (\n            <div className=\"chat-instance\">\n                <p>{this.state.messages}</p>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}