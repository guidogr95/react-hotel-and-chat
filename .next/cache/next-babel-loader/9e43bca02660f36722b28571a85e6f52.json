{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useContext, useEffect } from 'react';\nimport chatImg from '../images/chat.jpg';\nimport loading from '../images/gif/loading-arrow.gif';\nimport axios from 'axios';\nimport { RoomContext } from '../context';\nimport Link from 'next/link';\nimport Chatkit from '@pusher/chatkit-client';\nimport ChatList from '../components/ChatList';\nimport ChatBoard from '../components/ChatBoard';\nexport default function chat() {\n  const context = useContext(RoomContext);\n  const {\n    0: input,\n    1: setInput\n  } = useState({});\n  const {\n    0: btnDisabled,\n    1: setbtnDisabled\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState(null);\n  const {\n    0: currentRoom,\n    1: setCurrentRoom\n  } = useState({});\n  const {\n    0: value,\n    1: setValue\n  } = useState(0);\n  const style = {\n    minHeight: 600,\n    width: \"100%\",\n    padding: \"50px 0 50px 0\"\n  };\n\n  const handleChange = event => setInput(_objectSpread({}, input, {\n    [event.target.name]: event.target.value\n  }));\n\n  const useForceUpdate = () => {\n    setValue(Math.random());\n  };\n\n  useEffect(() => {\n    context.updateCredentials(true);\n  }, []);\n  useEffect(() => {\n    if (context.authenticated && context.authenticated !== null) {\n      handleChatSession();\n    } else {}\n  }, [context.authenticated]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setbtnDisabled(true);\n    axios({\n      url: 'https://express-login.now.sh/api/users/login',\n      method: 'POST',\n      data: JSON.stringify({\n        email: input.email,\n        password: input.password\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(res => {\n      setbtnDisabled(false);\n      context.updateCredentials(false, res.data.userId, res.data.email, res.data.token);\n    }).catch(err => {\n      setErrors(_objectSpread({}, errors, {\n        error: \"No se pudo conectar. Revise sus credenciales\"\n      }));\n      setbtnDisabled(false);\n    });\n  };\n\n  const handleChatSession = () => {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n      userId: context.chatUserId,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: 'https://express-login.now.sh/chat/authenticate'\n      })\n    });\n    chatManager.connect({\n      onAddedToRoom: () => {\n        useForceUpdate();\n      },\n      onRoomDeleted: () => {\n        useForceUpdate();\n      },\n      onPresenceChanged: (state, user) => {// console.log(`User ${user.name} is ${state.current}`)\n      }\n    }).then(currentUser => {\n      context.setCurrentUser(currentUser);\n      return currentUser.subscribeToRoom({\n        roomId: '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45',\n        messageLimit: 100,\n        hooks: {\n          onPresenceChanged: (state, user) => {// console.log(`User ${user.name} is ${state.current}`)\n          }\n        }\n      }).catch(err => console.log(err));\n    }).catch(error => console.log('Hiiiii', error));\n  };\n\n  const renderForm = () => {\n    return __jsx(React.Fragment, null, __jsx(\"h3\", null, \"Welcome\"), Object.values(errors).map((err, index) => {\n      return __jsx(\"div\", {\n        key: index,\n        className: \"login-err\"\n      }, err);\n    }), __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(\"label\", {\n      htmlFor: \"email\"\n    }, \"Email\"), __jsx(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      onChange: handleChange\n    }), __jsx(\"label\", {\n      htmlFor: \"password\"\n    }, \"Password\"), __jsx(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      onChange: handleChange\n    }), __jsx(\"button\", {\n      disabled: btnDisabled,\n      className: btnDisabled ? \"btn-primary submit-btn disabled\" : \"btn-primary submit-btn\",\n      type: \"submit\"\n    }, btnDisabled ? __jsx(\"img\", {\n      className: \"loading-login\",\n      src: loading,\n      alt: \"loading spinner\"\n    }) : \"Enviar\")));\n  };\n\n  const renderLoggedin = () => {\n    return __jsx(\"div\", {\n      className: \"signed\"\n    }, __jsx(\"h3\", null, \"You are logged in\"), __jsx(Link, {\n      href: \"/\"\n    }, __jsx(\"a\", {\n      className: \"btn-primary signed\"\n    }, \"Go Home\")), __jsx(Link, {\n      href: \"/admin\"\n    }, __jsx(\"a\", {\n      className: \"btn-primary signed\"\n    }, \"Admin Panel\")), __jsx(\"div\", {\n      className: \"chat-window\"\n    }, __jsx(ChatList, null), __jsx(ChatBoard, null)));\n  };\n\n  if (context.authenticated === null) {\n    return __jsx(\"div\", {\n      style: style\n    }, __jsx(\"div\", {\n      className: \"log-box loading\"\n    }, __jsx(\"img\", {\n      className: \"loading-spinner\",\n      src: loading,\n      alt: \"loading\"\n    })));\n  }\n\n  return __jsx(\"div\", {\n    style: style\n  }, __jsx(\"div\", {\n    className: \"log-box\"\n  }, context.authenticated ? renderLoggedin() : renderForm()));\n}","map":null,"metadata":{},"sourceType":"module"}