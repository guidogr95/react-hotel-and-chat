{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport { RoomContext } from '../context';\nimport ChatRoomButton from './ChatRoomButton';\n\nvar ChatList = /*#__PURE__*/function (_Component) {\n  _inherits(ChatList, _Component);\n\n  function ChatList(props) {\n    var _this;\n\n    _classCallCheck(this, ChatList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"switchChat\", function (event) {\n      _this.context.changeWindow(event.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addCheckedChat\", function (chat) {\n      _this.setState({\n        checkedChats: [].concat(_toConsumableArray(_this.state.checkedChats), [chat])\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeCheckedChat\", function (chat) {\n      console.log(_this.state.checkedChats);\n      console.log(chat); // const filtered = this.state.checkedChats.filter(chat)\n    });\n\n    _this.state = {\n      activeWindow: '',\n      checkedChats: []\n    };\n    return _this;\n  }\n\n  _createClass(ChatList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.currentUser !== this.props.currentUser && this.props.currentUser !== null && this.props.currentUser.rooms.length > 1) {\n        var chatWindow = this.props.currentUser.rooms.find(function (room) {\n          return room.id !== '992194b2-feaa-4842-a546-5c3482ae69c4';\n        });\n        this.context.changeWindow(chatWindow.id);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var currentUser = this.props.currentUser;\n      return __jsx(\"ul\", {\n        className: \"chatrooms-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, currentUser ? _Object$values(currentUser.rooms).map(function (room, index) {\n        if (room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45') {\n          return __jsx(ChatRoomButton, {\n            key: index,\n            room: room,\n            onClick: _this2.switchChat,\n            check: _this2.addCheckedChat,\n            uncheck: _this2.removeCheckedChat,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          });\n        }\n      }) : 'Loading...');\n    }\n  }]);\n\n  return ChatList;\n}(Component);\n\n_defineProperty(ChatList, \"contextType\", RoomContext);\n\nexport { ChatList as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatList.js"],"names":["Component","RoomContext","ChatRoomButton","ChatList","props","event","context","changeWindow","target","value","chat","setState","checkedChats","state","console","log","activeWindow","prevProps","currentUser","rooms","length","chatWindow","find","room","id","map","index","switchChat","addCheckedChat","removeCheckedChat"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;IAEqBC,Q;;;AAEjB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;;AADe,iEAgBN,UAACC,KAAD,EAAW;AACpB,YAAKC,OAAL,CAAaC,YAAb,CAA0BF,KAAK,CAACG,MAAN,CAAaC,KAAvC;AACH,KAlBkB;;AAAA,qEAoBF,UAACC,IAAD,EAAU;AACvB,YAAKC,QAAL,CAAc;AACVC,QAAAA,YAAY,+BAAM,MAAKC,KAAL,CAAWD,YAAjB,IAA+BF,IAA/B;AADF,OAAd;AAGH,KAxBkB;;AAAA,wEA0BC,UAACA,IAAD,EAAU;AAC1BI,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKF,KAAL,CAAWD,YAAvB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAF0B,CAG1B;AACH,KA9BkB;;AAEf,UAAKG,KAAL,GAAa;AACTG,MAAAA,YAAY,EAAE,EADL;AAETJ,MAAAA,YAAY,EAAE;AAFL,KAAb;AAFe;AAMlB;;;;uCAEkBK,S,EAAW;AAE1B,UAAMA,SAAS,CAACC,WAAV,KAA0B,KAAKd,KAAL,CAAWc,WAAtC,IAAsD,KAAKd,KAAL,CAAWc,WAAX,KAA2B,IAAjF,IAAyF,KAAKd,KAAL,CAAWc,WAAX,CAAuBC,KAAvB,CAA6BC,MAA7B,GAAsC,CAApI,EAAuI;AACnI,YAAMC,UAAU,GAAG,KAAKjB,KAAL,CAAWc,WAAX,CAAuBC,KAAvB,CAA6BG,IAA7B,CAAkC,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACC,EAAL,KAAY,sCAAhB;AAAA,SAAtC,CAAnB;AACA,aAAKlB,OAAL,CAAaC,YAAb,CAA0Bc,UAAU,CAACG,EAArC;AACH;AACJ;;;6BAkBQ;AAAA;;AAAA,UACGN,WADH,GACmB,KAAKd,KADxB,CACGc,WADH;AAEL,aACI;AAAI,QAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGIA,WAAW,GACX,eAAcA,WAAW,CAACC,KAA1B,EAAiCM,GAAjC,CAAqC,UAACF,IAAD,EAAOG,KAAP,EAAiB;AAClD,YAAKH,IAAI,CAACC,EAAL,KAAY,sCAAjB,EAA0D;AACtD,iBACI,MAAC,cAAD;AAAgB,YAAA,GAAG,EAAEE,KAArB;AAA4B,YAAA,IAAI,EAAEH,IAAlC;AAAwC,YAAA,OAAO,EAAE,MAAI,CAACI,UAAtD;AAAkE,YAAA,KAAK,EAAE,MAAI,CAACC,cAA9E;AAA8F,YAAA,OAAO,EAAE,MAAI,CAACC,iBAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AACJ,OAND,CADW,GAON,YAVT,CADJ;AAeH;;;;EAnDiC7B,S;;gBAAjBG,Q,iBACIF,W;;SADJE,Q","sourcesContent":["import { Component } from 'react'\nimport { RoomContext } from '../context';\nimport ChatRoomButton from './ChatRoomButton';\n\nexport default class ChatList extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            activeWindow: '',\n            checkedChats: []\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        \n        if ( (prevProps.currentUser !== this.props.currentUser) && this.props.currentUser !== null && this.props.currentUser.rooms.length > 1) {\n            const chatWindow = this.props.currentUser.rooms.find(room => room.id !== '992194b2-feaa-4842-a546-5c3482ae69c4' )\n            this.context.changeWindow(chatWindow.id)\n        }\n    }\n\n    switchChat = (event) => {\n        this.context.changeWindow(event.target.value)\n    }\n\n    addCheckedChat = (chat) => {\n        this.setState({\n            checkedChats: [...this.state.checkedChats, chat]\n        })\n    }\n\n    removeCheckedChat = (chat) => {\n        console.log(this.state.checkedChats)\n        console.log(chat)\n        // const filtered = this.state.checkedChats.filter(chat)\n    }\n\n    render() {\n        const { currentUser } = this.props\n        return (\n            <ul className=\"chatrooms-container\">\n\n            {\n                currentUser ?\n                Object.values(currentUser.rooms).map((room, index) => {\n                    if ( room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45' ) {\n                        return (\n                            <ChatRoomButton key={index} room={room} onClick={this.switchChat} check={this.addCheckedChat} uncheck={this.removeCheckedChat}  />\n                        )\n                    }\n                }) : 'Loading...'\n            }\n            </ul>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}