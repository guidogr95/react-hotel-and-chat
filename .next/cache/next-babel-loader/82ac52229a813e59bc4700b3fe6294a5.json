{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport items from './data';\nimport axios from 'axios';\nconst RoomContext = React.createContext(); // \n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false\n    });\n\n    _defineProperty(this, \"formatData\", items => {\n      let tempItems = items.data.map(item => {\n        let id = item.id;\n        let images = item.images.map(image => image.url);\n\n        let room = _objectSpread({}, item, {\n          images,\n          id\n        });\n\n        return room;\n      });\n      return tempItems;\n    });\n\n    _defineProperty(this, \"getRoom\", slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms); //callback function ^\n    });\n\n    _defineProperty(this, \"filterRooms\", () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state; //all the rooms\n\n      let tempRooms = [...rooms]; //transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filter by type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter extras\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      }\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    });\n  }\n\n  componentDidMount() {\n    const self = this;\n    axios.get('https://test-project-react.herokuapp.com/hotel-rooms').then(function (response) {\n      // handle success\n      console.log(response);\n      let rooms = self.formatData(response);\n      let featuredRooms = rooms.filter(room => room.featured === true);\n      let maxPrice = Math.max(...rooms.map(item => item.price));\n      let maxSize = Math.max(...rooms.map(item => item.size));\n      self.setState({\n        rooms,\n        featuredRooms,\n        sortedRooms: rooms,\n        loading: false,\n        price: maxPrice,\n        maxPrice,\n        maxSize\n      }); //   return rooms\n    }); // let rooms = this.formatData(items);\n    // let featuredRooms = rooms.filter(room => room.featured === true);\n    // let maxPrice = Math.max(...rooms.map(item => item.price));\n    // let maxSize = Math.max(...rooms.map(item => item.size));\n    // this.setState({\n    //     rooms,\n    //     featuredRooms,\n    //     sortedRooms: rooms,\n    //     loading: false,\n    //     price: maxPrice,\n    //     maxPrice,\n    //     maxSize\n    // })\n  }\n\n  render() {\n    return __jsx(RoomContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      })\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return __jsx(RoomConsumer, null, value => __jsx(Component, _extends({}, props, {\n      context: value\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":null,"metadata":{},"sourceType":"module"}