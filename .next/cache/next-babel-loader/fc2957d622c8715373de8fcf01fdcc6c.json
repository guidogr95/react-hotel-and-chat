{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport { RoomContext } from '../context';\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport RSC from 'react-scrollbars-custom';\n\nvar ChatInstance = /*#__PURE__*/function (_Component) {\n  _inherits(ChatInstance, _Component);\n\n  function ChatInstance(props) {\n    var _this;\n\n    _classCallCheck(this, ChatInstance);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatInstance).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'https://express-login.now.sh/chat/authenticate'\n        })\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this.setState({\n          currentUser: currentUser\n        });\n\n        return currentUser.subscribeToRoom({\n          roomId: _this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: function onMessage(message) {\n              if (_Object$keys(_this.state.currentRoom).length > 0) {\n                _this.setState({\n                  messages: [].concat(_toConsumableArray(_this.state.messages), [message]),\n                  scrollHeight: document.getElementById(\"\".concat(_this.state.currentRoom.createdAt.replace(/[-\\-:]/g, ''))).clientHeight\n                });\n              } else {\n                _this.setState({\n                  messages: [].concat(_toConsumableArray(_this.state.messages), [message])\n                });\n              }\n            },\n            onUserStartedTyping: function onUserStartedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: function onUserStoppedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(function (room) {\n        _this.setState({\n          currentRoom: room\n        });\n      }).then(function () {\n        _this.setState({\n          scrollHeight: document.getElementById(\"\".concat(_this.state.currentRoom.createdAt.replace(/[-\\-:]/g, ''))).clientHeight\n        });\n      })[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendMessage\", function (text) {\n      _this.setState({\n        text: ''\n      });\n\n      _this.state.currentUser.sendSimpleMessage({\n        roomId: _this.state.currentRoom.id,\n        text: text\n      }).then()[\"catch\"](function (err) {\n        console.log('error', err);\n\n        _this.setState({\n          text: text\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (event) {\n      event.preventDefault();\n\n      _this.sendMessage(_this.state.text);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEnterPress\", function (e) {\n      if (e.keyCode == 13 && e.shiftKey == false) {\n        _this.onSubmit(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCursor\", function () {\n      var cursor = _this.state.currentUser.readCursor({\n        roomId: _this.state.currentRoom.id\n      });\n\n      console.log(cursor);\n    });\n\n    _this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false,\n      text: '',\n      scrollHeight: 0\n    };\n    return _this;\n  }\n\n  _createClass(ChatInstance, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        className: this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"\n      }, __jsx(\"div\", {\n        className: \"chat-messages\"\n      }, __jsx(RSC, {\n        scrollTop: this.state.scrollHeight\n      }, __jsx(\"ul\", {\n        id: this.state.currentRoom.createdAt ? this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '') : \"\"\n      }, this.state.messages.map(function (message, index) {\n        var rawId = message.senderId;\n        var Id = rawId.slice(20, rawId.length);\n        return __jsx(\"li\", {\n          className: _this2.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\",\n          key: index\n        }, __jsx(\"div\", {\n          className: \"chat-msg\"\n        }, __jsx(\"div\", {\n          className: \"avatar\",\n          onClick: _this2.onCursor\n        }, _this2.state.currentUser.id == message.senderId ? message.senderId[0] : Id[0]), __jsx(\"div\", {\n          className: \"msg-content\"\n        }, __jsx(\"span\", null, _this2.state.currentUser.id == message.senderId ? message.senderId : Id), __jsx(\"p\", null, message.text))));\n      })))), __jsx(\"div\", {\n        className: \"chat-input-text\"\n      }, __jsx(\"form\", {\n        onSubmit: this.onSubmit\n      }, __jsx(\"textarea\", {\n        onKeyDown: this.onEnterPress,\n        className: \"hidescroll\",\n        name: \"text\",\n        placeholder: \"Your text...\",\n        onChange: this.handleChange,\n        value: this.state.text,\n        autoComplete: \"off\",\n        wrap: \"hard\"\n      }), __jsx(\"div\", {\n        className: \"button-container\"\n      }, __jsx(\"button\", {\n        type: \"submit\"\n      }, __jsx(FaPaperPlane, null))))));\n    }\n  }]);\n\n  return ChatInstance;\n}(Component);\n\n_defineProperty(ChatInstance, \"contextType\", RoomContext);\n\nexport { ChatInstance as default };","map":null,"metadata":{},"sourceType":"module"}