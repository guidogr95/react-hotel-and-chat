{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\n\nvar ChatScreen = /*#__PURE__*/function (_Component) {\n  _inherits(ChatScreen, _Component);\n\n  function ChatScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatScreen).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      console.log('mounted', _this.props.currentUsername);\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: _this.props.currentUsername,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(function (currentUser) {\n        console.log(currentUser);\n        currentUser.subscribeToRoom({\n          roomId: '3f3bdabe-acff-4165-998d-096fff7eb306',\n          messageLimit: 100,\n          hooks: {\n            onNewMessage: function onNewMessage(message) {\n              console.log(message);\n\n              _this.setState({\n                messages: [].concat(_toConsumableArray(_this.state.messages), [message])\n              });\n            }\n          }\n        });\n      }).then(function (currentRoom) {})[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function () {\n      console.log(_this.state.messages);\n    });\n\n    _this.state = {\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Hello \", this.props.currentUsername, __jsx(MessageList, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatScreen;\n}(Component);\n\nexport { ChatScreen as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js"],"names":["React","Component","Chatkit","MessageList","ChatScreen","props","console","log","currentUsername","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","subscribeToRoom","roomId","messageLimit","hooks","onNewMessage","message","setState","messages","state","currentRoom","error"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IAEqBC,U;;;AACjB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;;AADe,wEAOC,YAAM;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,MAAKF,KAAL,CAAWG,eAAlC;AACA,UAAMC,WAAW,GAAG,IAAIP,OAAO,CAACQ,WAAZ,CAAwB;AACxCC,QAAAA,eAAe,EAAE,6CADuB;AAExCC,QAAAA,MAAM,EAAE,MAAKP,KAAL,CAAWG,eAFqB;AAGxCK,QAAAA,aAAa,EAAE,IAAIX,OAAO,CAACY,aAAZ,CAA0B;AACrCC,UAAAA,GAAG,EAAE;AADgC,SAA1B;AAHyB,OAAxB,CAApB;AAQAN,MAAAA,WAAW,CACNO,OADL,GAEKC,IAFL,CAEU,UAAAC,WAAW,EAAI;AACjBZ,QAAAA,OAAO,CAACC,GAAR,CAAYW,WAAZ;AACAA,QAAAA,WAAW,CAACC,eAAZ,CAA4B;AACxBC,UAAAA,MAAM,EAAE,sCADgB;AAExBC,UAAAA,YAAY,EAAE,GAFU;AAGxBC,UAAAA,KAAK,EAAE;AACHC,YAAAA,YAAY,EAAE,sBAAAC,OAAO,EAAI;AACrBlB,cAAAA,OAAO,CAACC,GAAR,CAAYiB,OAAZ;;AACA,oBAAKC,QAAL,CAAc;AACVC,gBAAAA,QAAQ,+BAAM,MAAKC,KAAL,CAAWD,QAAjB,IAA2BF,OAA3B;AADE,eAAd;AAGH;AANE;AAHiB,SAA5B;AAYH,OAhBL,EAiBKP,IAjBL,CAiBU,UAAAW,WAAW,EAAI,CAAE,CAjB3B,WAkBW,UAAAC,KAAK;AAAA,eAAIvB,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBsB,KAAtB,CAAJ;AAAA,OAlBhB;AAmBH,KApCkB;;AAAA,yEAsCE,YAAM;AACvBvB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKoB,KAAL,CAAWD,QAAvB;AACH,KAxCkB;;AAEf,UAAKC,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAE;AADD,KAAb;AAFe;AAKlB;;;;6BAqCQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACW,KAAKrB,KAAL,CAAWG,eADtB,EAEI,MAAC,WAAD;AAAa,QAAA,QAAQ,EAAE,KAAKmB,KAAL,CAAWD,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAMH;;;;EAlDmCzB,S;;SAAnBG,U","sourcesContent":["import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n//Components\nimport MessageList from './MessageList'\n\nexport default class ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: []\n        }\n    }\n\n    componentDidMount = () => {\n        console.log('mounted', this.props.currentUsername);\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: this.props.currentUsername,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                console.log(currentUser)\n                currentUser.subscribeToRoom({\n                    roomId: '3f3bdabe-acff-4165-998d-096fff7eb306',\n                    messageLimit: 100,\n                    hooks: {\n                        onNewMessage: message => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        }\n                    }\n                })\n            })\n            .then(currentRoom => {})\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    componentDidUpdate = () => {\n        console.log(this.state.messages)\n    }\n\n    render() {\n        return (\n            <div>\n                Hello {this.props.currentUsername}\n                <MessageList messages={this.state.messages}/>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}