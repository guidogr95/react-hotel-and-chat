{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport TypingIndicator from './TypingIndicator';\nexport default class ChatScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      console.log('mounted', this.props.currentUsername);\n      console.log('mounted', this.props.userId);\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: this.props.userId,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        console.log(currentUser); // return currentUser.createRoom({\n        //     id: `#${currentUser.id}-room`,\n        //     name: `${currentUser.id}-room`,\n        //     messageLimit: 100,\n        //     hooks: {\n        //         onMessage: (message) => {\n        //             console.log(message)\n        //             this.setState({\n        //                 messages: [...this.state.messages, message]\n        //             })\n        //         },\n        //         // onUserStartedTyping: user => {\n        //         //     this.setState({\n        //         //         userTyping: user.name,\n        //         //         isUserTyping: true\n        //         //     })\n        //         // },\n        //         // onUserStoppedTyping: user => {\n        //         //     this.setState({\n        //         //         userTyping: user.name,\n        //         //         isUserTyping: false\n        //         //     })\n        //         // }\n        //     },\n        //     private: false,\n        //     addUserIds: [currentUser.id, 'guido']\n        // }).then(room => {\n        //     this.setState({ currentRoom: room })\n        //     console.log('created', room)\n        // }).catch(err => {\n        //     console.log('error', err)\n        // })\n\n        return currentUser.subscribeToRoom({\n          roomId: '29333978-d984-447e-b9b8-09c7f183a640',\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              console.log(message);\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(currentRoom => this.setState({\n        currentRoom\n      })).catch(error => console.log('Hiiiii', error));\n    });\n\n    _defineProperty(this, \"sendMessage\", text => {\n      this.state.currentUser.sendSimpleMessage({\n        roomId: this.state.currentRoom.id,\n        text\n      }).then(messageId => console.log('sent', messageId)).catch(err => console.log('error', err));\n    });\n\n    _defineProperty(this, \"sendTypingEvent\", () => {\n      this.state.currentUser.isTypingIn({\n        roomId: this.state.currentRoom.id\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Hello \", this.props.currentUsername, __jsx(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), this.state.isUserTyping ? __jsx(TypingIndicator, {\n      userTyping: this.state.userTyping,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }) : '', __jsx(SendMessageForm, {\n      onSubmit: this.sendMessage,\n      onChange: this.sendTypingEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js"],"names":["React","Component","Chatkit","MessageList","SendMessageForm","TypingIndicator","ChatScreen","constructor","props","console","log","currentUsername","userId","chatManager","ChatManager","instanceLocator","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","messages","state","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","currentRoom","catch","error","text","sendSimpleMessage","id","messageId","err","isTypingIn","render","sendMessage","sendTypingEvent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n//Components\nimport MessageList from './MessageList'\nimport SendMessageForm from './SendMessageForm'\nimport TypingIndicator from './TypingIndicator'\n\nexport default class ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        console.log('mounted', this.props.currentUsername);\n        console.log('mounted', this.props.userId);\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: this.props.userId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                console.log(currentUser)\n\n                // return currentUser.createRoom({\n                //     id: `#${currentUser.id}-room`,\n                //     name: `${currentUser.id}-room`,\n                //     messageLimit: 100,\n                //     hooks: {\n                //         onMessage: (message) => {\n                //             console.log(message)\n                //             this.setState({\n                //                 messages: [...this.state.messages, message]\n                //             })\n                //         },\n                //         // onUserStartedTyping: user => {\n                //         //     this.setState({\n                //         //         userTyping: user.name,\n                //         //         isUserTyping: true\n                //         //     })\n                //         // },\n                //         // onUserStoppedTyping: user => {\n                //         //     this.setState({\n                //         //         userTyping: user.name,\n                //         //         isUserTyping: false\n                //         //     })\n                //         // }\n                //     },\n                //     private: false,\n                //     addUserIds: [currentUser.id, 'guido']\n                // }).then(room => {\n                //     this.setState({ currentRoom: room })\n                //     console.log('created', room)\n                // }).catch(err => {\n                //     console.log('error', err)\n                // })\n\n                return currentUser.subscribeToRoom({\n                    roomId: '29333978-d984-447e-b9b8-09c7f183a640',\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(currentRoom => this.setState({currentRoom}))\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then(messageId => console.log('sent', messageId))\n        .catch(err => console.log('error', err))\n    }\n\n    sendTypingEvent = () => {\n        this.state.currentUser.isTypingIn({\n            roomId: this.state.currentRoom.id\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                Hello {this.props.currentUsername}\n                <MessageList messages={this.state.messages}/>\n                { this.state.isUserTyping ? <TypingIndicator userTyping={this.state.userTyping} /> : '' }\n                <SendMessageForm onSubmit={this.sendMessage} onChange={this.sendTypingEvent} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}