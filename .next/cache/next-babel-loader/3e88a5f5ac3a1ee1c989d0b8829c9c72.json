{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/pages/chat.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useContext, useEffect } from 'react';\nimport chatImg from '../images/chat.jpg';\nimport loading from '../images/gif/loading-arrow.gif';\nimport axios from 'axios';\nimport { RoomContext } from '../context';\nimport Chatkit from '@pusher/chatkit-client';\nimport ChatList from '../components/ChatList';\nimport ChatBoard from '../components/ChatBoard';\nimport Head from 'next/head';\nexport default function chat() {\n  const context = useContext(RoomContext);\n  const {\n    0: input,\n    1: setInput\n  } = useState({});\n  const {\n    0: btnDisabled,\n    1: setbtnDisabled\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState(null);\n  const {\n    0: currentRoom,\n    1: setCurrentRoom\n  } = useState({});\n  const {\n    0: chatListActive,\n    1: setchatListActive\n  } = useState(false);\n  const {\n    0: value,\n    1: setValue\n  } = useState(0);\n  const style = {\n    minHeight: 600,\n    width: \"100%\",\n    height: \"calc(100vh - 65px)\",\n    background: \"rgba(175, 154, 125,0.5)\"\n  };\n\n  const handleChange = event => setInput(_objectSpread({}, input, {\n    [event.target.name]: event.target.value\n  }));\n\n  const useForceUpdate = () => {\n    setValue(Math.random);\n  };\n\n  useEffect(() => {\n    context.updateCredentials(true);\n  }, []);\n  useEffect(() => {\n    if (context.authenticated && context.authenticated !== null) {\n      handleChatSession();\n    } else {}\n  }, [context.authenticated]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setbtnDisabled(true);\n    axios({\n      url: 'https://express-login.now.sh/api/users/login',\n      method: 'POST',\n      data: JSON.stringify({\n        email: input.email,\n        password: input.password\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(res => {\n      setbtnDisabled(false);\n      context.updateCredentials(false, res.data.userId, res.data.email, res.data.token);\n    }).catch(err => {\n      setErrors(_objectSpread({}, errors, {\n        error: \"No se pudo conectar. Revise sus credenciales\"\n      }));\n      setbtnDisabled(false);\n    });\n  };\n\n  const setChatListActive = () => {\n    console.log('true');\n    setchatListActive(!chatListActive);\n  };\n\n  const checkNewMsg = () => {\n    let msgs;\n    const title = document.title;\n\n    if (Object.keys(this.context.currentUser).length > 0) {\n      const unreadMsgs = Object.values(this.context.currentUser.rooms).filter(room => room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45' && room.unreadCount > 0);\n      console.log(unreadMsgs);\n      console.log(unreadMsgs.length);\n      msgs = unreadMsgs.length;\n    }\n  };\n\n  const handleChatSession = () => {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n      userId: context.chatUserId,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: 'https://express-login.now.sh/chat/authenticate'\n      })\n    });\n    chatManager.connect({\n      onAddedToRoom: () => {\n        useForceUpdate();\n      },\n      onRoomDeleted: () => {\n        useForceUpdate();\n      },\n      onNewReadCursor: () => {\n        useForceUpdate();\n      },\n      onRoomUpdated: () => {\n        useForceUpdate();\n      }\n    }).then(currentUser => {\n      console.log('updated');\n      context.setCurrentUser(currentUser);\n      return currentUser.subscribeToRoom({\n        roomId: '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45',\n        messageLimit: 100,\n        hooks: {\n          onPresenceChanged: (state, user) => {// console.log(`User ${user.name} is ${state.current}`)\n          }\n        }\n      }).catch(err => console.log(err));\n    }).catch(error => console.log('Hiiiii', error));\n  };\n\n  const renderForm = () => {\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Hotel Admin\")), __jsx(\"h3\", {\n      className: \"welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Welcome\"), Object.values(errors).map((err, index) => {\n      return __jsx(\"div\", {\n        key: index,\n        className: \"login-err\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, err);\n    }), __jsx(\"form\", {\n      className: \"login-form\",\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Email\"), __jsx(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), __jsx(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Password\"), __jsx(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      disabled: btnDisabled,\n      className: btnDisabled ? \"btn-primary submit-btn disabled\" : \"btn-primary submit-btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, btnDisabled ? __jsx(\"img\", {\n      className: \"loading-login\",\n      src: loading,\n      alt: \"loading spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }) : \"Enviar\")));\n  };\n\n  const renderLoggedin = () => {\n    return __jsx(\"div\", {\n      className: \"signed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"chat-window\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, __jsx(ChatList, {\n      active: chatListActive,\n      setChatListActive: setChatListActive,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), __jsx(ChatBoard, {\n      setChatListActive: setChatListActive,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })));\n  };\n\n  if (context.authenticated === null) {\n    return __jsx(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"log-box loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      className: \"loading-spinner\",\n      src: loading,\n      alt: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })));\n  }\n\n  return __jsx(\"div\", {\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"log-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, context.authenticated ? renderLoggedin() : renderForm()));\n}","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/pages/chat.js"],"names":["useState","useContext","useEffect","chatImg","loading","axios","RoomContext","Chatkit","ChatList","ChatBoard","Head","chat","context","input","setInput","btnDisabled","setbtnDisabled","errors","setErrors","currentUser","setCurrentUser","currentRoom","setCurrentRoom","chatListActive","setchatListActive","value","setValue","style","minHeight","width","height","background","handleChange","event","target","name","useForceUpdate","Math","random","updateCredentials","authenticated","handleChatSession","handleSubmit","preventDefault","url","method","data","JSON","stringify","email","password","headers","then","res","userId","token","catch","err","error","setChatListActive","console","log","checkNewMsg","msgs","title","document","Object","keys","length","unreadMsgs","values","rooms","filter","room","id","unreadCount","chatManager","ChatManager","instanceLocator","chatUserId","tokenProvider","TokenProvider","connect","onAddedToRoom","onRoomDeleted","onNewReadCursor","onRoomUpdated","subscribeToRoom","roomId","messageLimit","hooks","onPresenceChanged","state","user","renderForm","map","index","renderLoggedin"],"mappings":"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","sourcesContent":["import { useState, useContext, useEffect } from 'react'\nimport chatImg from '../images/chat.jpg'\nimport loading from '../images/gif/loading-arrow.gif'\nimport axios from 'axios';\nimport { RoomContext } from '../context'\nimport Chatkit from '@pusher/chatkit-client'\nimport ChatList from '../components/ChatList'\nimport ChatBoard from '../components/ChatBoard'\nimport Head from 'next/head';\n\n\nexport default function chat() {\n    \n    const context = useContext(RoomContext);\n    const [input, setInput] = useState({});\n    const [btnDisabled, setbtnDisabled] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [currentUser, setCurrentUser] = useState(null);\n    const [currentRoom, setCurrentRoom] = useState({});\n    const [chatListActive, setchatListActive] = useState(false)\n    const [value, setValue] = useState(0);\n    const style = {\n        minHeight: 600,\n        width: \"100%\",\n        height: \"calc(100vh - 65px)\",\n        background: \"rgba(175, 154, 125,0.5)\"\n    };\n    const handleChange = (event) => setInput({\n        ...input,\n        [event.target.name]: event.target.value\n    });\n\n    const useForceUpdate = () => {\n        setValue(Math.random);\n    }\n\n    useEffect(() => {\n        context.updateCredentials(true);\n    }, [])\n\n    useEffect(() => {\n        if ( context.authenticated && context.authenticated !== null ) {\n            handleChatSession();\n        } else {\n\n        }\n        \n    }, [context.authenticated])\n    \n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setbtnDisabled(true);\n        axios({\n            url: 'https://express-login.now.sh/api/users/login',\n            method: 'POST',\n            data: JSON.stringify({\n                email: input.email,\n                password: input.password\n            }),\n            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json'}\n        })\n        .then(res => {\n            setbtnDisabled(false);\n            context.updateCredentials(false, res.data.userId, res.data.email, res.data.token);\n        })\n        .catch(err => {\n            setErrors({\n                ...errors,\n                error: \"No se pudo conectar. Revise sus credenciales\"\n            })\n            setbtnDisabled(false);\n        })\n    }\n\n    const setChatListActive = () => {\n        console.log('true')\n        setchatListActive(!chatListActive)\n    }\n\n    const checkNewMsg = () => {\n        let msgs;\n        const title = document.title\n        if ( Object.keys(this.context.currentUser).length > 0 ) {\n            const unreadMsgs = Object.values(this.context.currentUser.rooms).filter(room => room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45' && room.unreadCount > 0)\n            console.log(unreadMsgs)\n            console.log(unreadMsgs.length)\n            msgs = unreadMsgs.length\n        }\n    }\n\n    const handleChatSession = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: context.chatUserId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'https://express-login.now.sh/chat/authenticate'\n            })\n        })\n\n        chatManager\n            .connect({\n                onAddedToRoom: () => {\n                    useForceUpdate();\n                },\n                onRoomDeleted: () => {\n                    useForceUpdate();\n                },\n                onNewReadCursor: () => {\n\n                    useForceUpdate();\n                },\n                onRoomUpdated: () => {\n                    useForceUpdate();\n                }\n            })\n            .then(currentUser => {\n                console.log('updated')\n                context.setCurrentUser(currentUser)\n                return currentUser.subscribeToRoom({\n                        roomId: '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45',\n                        messageLimit: 100,\n                        hooks: {\n                            onPresenceChanged: (state, user) => {\n                                // console.log(`User ${user.name} is ${state.current}`)\n                            }\n                        }\n                        \n                }).catch(err => console.log(err))\n            })\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    const renderForm = () => {\n        return (\n            <React.Fragment>\n                <Head>\n                    <title>Hotel Admin</title>\n                </Head>\n                <h3 className=\"welcome\">Welcome</h3>\n                {\n                Object.values(errors).map((err, index) => {\n                    return <div key={index} className=\"login-err\">{err}</div>\n                })\n                }\n                <form className=\"login-form\" onSubmit={handleSubmit}>\n                    <label htmlFor=\"email\">Email</label>\n                    <input type=\"email\" name=\"email\" id=\"email\" onChange={handleChange}/>\n\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" name=\"password\" id=\"password\" onChange={handleChange}/>\n                    <button disabled={btnDisabled} className={btnDisabled?\"btn-primary submit-btn disabled\":\"btn-primary submit-btn\"} type=\"submit\">{\n                        btnDisabled ?\n                        <img className=\"loading-login\" src={loading} alt=\"loading spinner\"/>:\n                        \"Enviar\"\n                    }</button>\n                </form>\n            </React.Fragment>\n        )\n    }\n    const renderLoggedin = () => {\n        return (\n            <div className=\"signed\">\n                <div className=\"chat-window\">\n                    <ChatList active={chatListActive} setChatListActive={setChatListActive} />\n                    <ChatBoard  setChatListActive={setChatListActive} />\n                </div>\n                \n            </div>\n        )\n    }\n    if (context.authenticated === null) {\n        return (\n            <div style={style}>\n                <div className=\"log-box loading\">\n                <img className=\"loading-spinner\" src={loading} alt=\"loading\"/>\n                </div>\n            </div>\n        )\n    }\n    return (\n        <div style={style}>\n            <div className=\"log-box\">\n                {\n                    context.authenticated ?\n                        renderLoggedin() :\n                        renderForm()\n                }\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}