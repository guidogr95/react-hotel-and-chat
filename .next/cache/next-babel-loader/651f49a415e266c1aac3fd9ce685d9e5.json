{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/context.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport axios from 'axios';\nconst RoomContext = React.createContext(); // \n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      roomtype: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      PUBLICTOKEN: 'f3341f2f85860e06446a5e86bfd392',\n      token: null,\n      authenticated: false,\n      userId: null\n    });\n\n    _defineProperty(this, \"formatData\", items => {\n      let tempItems = items.map(item => {\n        let id = item.id;\n        let images = item.images.map(image => image.url);\n\n        let room = _objectSpread({}, item, {\n          images,\n          id\n        });\n\n        return room;\n      });\n      return tempItems;\n    });\n\n    _defineProperty(this, \"getRoom\", slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    });\n\n    _defineProperty(this, \"updateCredentials\", (userId, token) => {\n      // localStorage.setItem('userData', JSON.stringify({userId: userId, token: token}));\n      console.log('ran1');\n      this.setState({\n        userId,\n        token,\n        authenticated: true\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms); //callback function ^\n    });\n\n    _defineProperty(this, \"filterRooms\", () => {\n      let {\n        rooms,\n        roomtype,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state; //all the rooms\n\n      let tempRooms = [...rooms]; //transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filter by type\n\n      if (roomtype !== 'all') {\n        console.log('notal');\n        tempRooms = tempRooms.filter(room => room.roomtype === roomtype);\n      } //filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter extras\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      }\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    });\n  }\n\n  componentDidMount() {\n    const self = this;\n    axios({\n      url: 'https://graphql.datocms.com/',\n      method: 'post',\n      data: {\n        query: `{\n                allRooms {\n                    id\n                    name\n                    slug\n                    price\n                    roomtype\n                    size\n                    capacity\n                    breakfast\n                    pets\n                    featured\n                    description\n                    extras\n                    images {\n                      url\n                    }\n                  }\n                }`\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.state.PUBLICTOKEN}`\n      }\n    }).then(function (response) {\n      // handle success\n      let rooms = self.formatData(response.data.data.allRooms);\n      let featuredRooms = rooms.filter(room => room.featured === true);\n      let maxPrice = Math.max(...rooms.map(item => item.price));\n      let maxSize = Math.max(...rooms.map(item => item.size));\n      self.setState({\n        rooms,\n        featuredRooms,\n        sortedRooms: rooms,\n        loading: false,\n        price: maxPrice,\n        maxPrice,\n        maxSize\n      });\n      return rooms;\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return __jsx(RoomContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getRoom: this.getRoom,\n        handleChange: this.handleChange,\n        updateCredentials: this.updateCredentials\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return __jsx(RoomConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, value => __jsx(Component, _extends({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/context.js"],"names":["React","Component","axios","RoomContext","createContext","RoomProvider","rooms","sortedRooms","featuredRooms","loading","roomtype","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","PUBLICTOKEN","token","authenticated","userId","items","tempItems","map","item","id","images","image","url","room","slug","tempRooms","state","find","console","log","setState","event","target","value","type","checked","name","filterRooms","pets","parseInt","filter","componentDidMount","self","method","data","query","headers","then","response","formatData","allRooms","featured","Math","max","size","catch","error","render","getRoom","handleChange","updateCredentials","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport axios from 'axios'\n\nconst RoomContext = React.createContext();\n// \n\nclass RoomProvider extends Component {\n    state={\n        rooms: [],\n        sortedRooms: [],\n        featuredRooms: [],\n        loading: true,\n        roomtype:'all',\n        capacity:1,\n        price:0,\n        minPrice: 0,\n        maxPrice: 0,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        PUBLICTOKEN: 'f3341f2f85860e06446a5e86bfd392',\n        token: null,\n        authenticated: false,\n        userId: null\n    }\n    componentDidMount(){\n        const self = this;\n        axios({\n            url: 'https://graphql.datocms.com/',\n            method: 'post',\n            data: {\n              query: `{\n                allRooms {\n                    id\n                    name\n                    slug\n                    price\n                    roomtype\n                    size\n                    capacity\n                    breakfast\n                    pets\n                    featured\n                    description\n                    extras\n                    images {\n                      url\n                    }\n                  }\n                }`\n            },\n            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': `Bearer ${this.state.PUBLICTOKEN}`,}\n          })\n        .then(function (response) {\n          // handle success\n          let rooms = self.formatData(response.data.data.allRooms);\n          let featuredRooms = rooms.filter(room => room.featured === true);\n            let maxPrice = Math.max(...rooms.map(item => item.price));\n            let maxSize = Math.max(...rooms.map(item => item.size));\n            self.setState({\n                rooms,\n                featuredRooms,\n                sortedRooms: rooms,\n                loading: false,\n                price: maxPrice,\n                maxPrice,\n                maxSize\n            })\n          return rooms\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n    formatData = (items) => {\n        let tempItems = items.map(item => {\n            let id = item.id;\n            let images = item.images.map(image => image.url);\n            let room = {...item,images,id};\n            return room;\n        });\n        return tempItems;\n    }\n    getRoom = (slug) => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug === slug);\n        return room;\n    }\n    updateCredentials = (userId, token) => {\n        // localStorage.setItem('userData', JSON.stringify({userId: userId, token: token}));\n        console.log('ran1');\n        this.setState({\n            userId,\n            token,\n            authenticated: true\n        })\n    }\n    handleChange = event => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked :\n        target.value\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        },this.filterRooms)\n        //callback function ^\n    }\n    filterRooms = () => {\n        let {\n            rooms,roomtype,capacity,price,minSize,maxSize,breakfast,pets\n        } = this.state\n        //all the rooms\n        let tempRooms = [...rooms];\n        //transform value\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n        //filter by type\n        if (roomtype !== 'all') {\n            console.log('notal')\n            tempRooms = tempRooms.filter(room => room.roomtype === roomtype)\n        }\n        //filter by capacity\n        if (capacity !== 1) {\n            tempRooms = tempRooms.filter(room => room.capacity >= capacity)\n        }\n        //filter by price\n        tempRooms= tempRooms.filter(room => room.price <= price )\n        //filter extras\n        if ( breakfast ) {\n            tempRooms = tempRooms.filter(room => room.breakfast === true)\n        }\n        if ( pets ) {\n            tempRooms = tempRooms.filter(room => room.pets === true)\n        }\n        this.setState({\n            sortedRooms: tempRooms\n        })\n    }\n    render() {\n        return (\n            <RoomContext.Provider \n                value={{\n                    ...this.state,\n                    getRoom: this.getRoom,\n                    handleChange: this.handleChange,\n                    updateCredentials: this.updateCredentials\n                }}\n            >\n                {this.props.children}\n            </RoomContext.Provider>\n        )\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component) {\n    return function ConsumerWrapper(props) {\n        return <RoomConsumer>\n            {value => <Component {...props} context={value}/>}\n        </RoomConsumer>\n    }\n}\n\nexport{ RoomProvider, RoomConsumer, RoomContext };\n"]},"metadata":{},"sourceType":"module"}