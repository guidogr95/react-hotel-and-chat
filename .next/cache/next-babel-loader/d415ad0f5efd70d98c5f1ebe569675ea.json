{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport TypingIndicator from './TypingIndicator';\nexport default class ChatScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: this.props.userId,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'https://express-login.now.sh/chat/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        console.log(currentUser);\n        return currentUser.createRoom({\n          id: currentUser.id,\n          name: currentUser.name,\n          private: true,\n          addUserIds: [currentUser.id, 'guido']\n        }).then(room => {\n          this.setState({\n            currentRoom: room\n          });\n          return currentUser.subscribeToRoom({\n            roomId: room.id,\n            messageLimit: 100,\n            hooks: {\n              onMessage: message => {\n                console.log(message);\n                this.setState({\n                  messages: [...this.state.messages, message]\n                });\n              },\n              onUserStartedTyping: user => {\n                this.setState({\n                  userTyping: user.name,\n                  isUserTyping: true\n                });\n              },\n              onUserStoppedTyping: user => {\n                this.setState({\n                  userTyping: user.name,\n                  isUserTyping: false\n                });\n              }\n            }\n          }).then(() => {\n            return this.state.currentUser.subscribeToRoomMultipart({\n              roomId: '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45',\n              messageLimit: 100,\n              hooks: {\n                onPresenceChanged: (state, user) => {\n                  console.log(`User ${user.name} is ${state.current}`);\n                }\n              }\n            }).catch(err => console.log(err));\n          });\n        }).catch(err => {\n          console.log('error', err);\n        });\n      }).catch(error => console.log('Hiiiii', error));\n    });\n\n    _defineProperty(this, \"sendMessage\", text => {\n      this.state.currentUser.sendSimpleMessage({\n        roomId: this.state.currentRoom.id,\n        text\n      }).then(messageId => this.setState({\n        text: ''\n      })).catch(err => console.log('error', err));\n    });\n\n    _defineProperty(this, \"sendTypingEvent\", () => {\n      this.state.currentUser.isTypingIn({\n        roomId: this.state.currentRoom.id\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"chat-screen\"\n    }, __jsx(MessageList, {\n      messages: this.state.messages,\n      currentUser: this.state.currentUser\n    }), this.state.isUserTyping ? __jsx(TypingIndicator, {\n      userTyping: this.state.userTyping\n    }) : '', __jsx(SendMessageForm, {\n      onSubmit: this.sendMessage,\n      onChange: this.sendTypingEvent\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}