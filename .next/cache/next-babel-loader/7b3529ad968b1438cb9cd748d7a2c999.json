{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport TypingIndicator from './TypingIndicator';\n\nvar ChatScreen = /*#__PURE__*/function (_Component) {\n  _inherits(ChatScreen, _Component);\n\n  function ChatScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatScreen).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      console.log('mounted', _this.props.currentUsername);\n      console.log('mounted', _this.props.userId);\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: _this.props.userId,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this.setState({\n          currentUser: currentUser\n        });\n\n        console.log(currentUser);\n        return currentUser.createRoom({\n          id: \"#\".concat(currentUser.id, \"-room\"),\n          name: \"\".concat(currentUser.id, \"-room\"),\n          \"private\": true,\n          addUserIds: [currentUser.id, 'guido']\n        }).then(function (room) {\n          _this.setState({\n            currentRoom: room\n          });\n\n          console.log('created', room);\n        })[\"catch\"](function (err) {\n          console.log('error', err);\n        }); // return currentUser.subscribeToRoom({\n        //     roomId: 'eadf4af7-69ff-4a59-9dc1-d4c4adcafde4',\n        //     messageLimit: 100,\n        //     hooks: {\n        //         onMessage: (message) => {\n        //             console.log(message)\n        //             this.setState({\n        //                 messages: [...this.state.messages, message]\n        //             })\n        //         },\n        //         onUserStartedTyping: user => {\n        //             this.setState({\n        //                 userTyping: user.name,\n        //                 isUserTyping: true\n        //             })\n        //         },\n        //         onUserStoppedTyping: user => {\n        //             this.setState({\n        //                 userTyping: user.name,\n        //                 isUserTyping: false\n        //             })\n        //         }\n        //     }\n        // })\n      }).then(function (currentRoom) {\n        console.log('current', currentRoom);\n\n        _this.setState({\n          currentRoom: currentRoom\n        });\n      })[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function () {\n      console.log(_this.state.messages);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendMessage\", function (text) {\n      _this.state.currentUser.sendMessage({\n        roomId: _this.state.currentRoom.id,\n        text: text\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendTypingEvent\", function () {\n      _this.state.currentUser.isTypingIn({\n        roomId: _this.state.currentRoom.id\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    });\n\n    _this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Hello \", this.props.currentUsername, __jsx(MessageList, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), this.state.isUserTyping ? __jsx(TypingIndicator, {\n        userTyping: this.state.userTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }) : '', __jsx(SendMessageForm, {\n        onSubmit: this.sendMessage,\n        onChange: this.sendTypingEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatScreen;\n}(Component);\n\nexport { ChatScreen as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js"],"names":["React","Component","Chatkit","MessageList","SendMessageForm","TypingIndicator","ChatScreen","props","console","log","currentUsername","userId","chatManager","ChatManager","instanceLocator","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","createRoom","id","name","addUserIds","room","currentRoom","err","error","state","messages","text","sendMessage","roomId","isTypingIn","userTyping","isUserTyping","sendTypingEvent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n//Components\nimport MessageList from './MessageList'\nimport SendMessageForm from './SendMessageForm'\nimport TypingIndicator from './TypingIndicator'\n\nexport default class ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        console.log('mounted', this.props.currentUsername);\n        console.log('mounted', this.props.userId);\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: this.props.userId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                console.log(currentUser)\n\n                return currentUser.createRoom({\n                    id: `#${currentUser.id}-room`,\n                    name: `${currentUser.id}-room`,\n                    private: true,\n                    addUserIds: [currentUser.id, 'guido']\n                }).then(room => {\n                    this.setState({ currentRoom: room })\n                    console.log('created', room)\n                }).catch(err => {\n                    console.log('error', err)\n                })\n\n                // return currentUser.subscribeToRoom({\n                //     roomId: 'eadf4af7-69ff-4a59-9dc1-d4c4adcafde4',\n                //     messageLimit: 100,\n                //     hooks: {\n                //         onMessage: (message) => {\n                //             console.log(message)\n                //             this.setState({\n                //                 messages: [...this.state.messages, message]\n                //             })\n                //         },\n                //         onUserStartedTyping: user => {\n                //             this.setState({\n                //                 userTyping: user.name,\n                //                 isUserTyping: true\n                //             })\n                //         },\n                //         onUserStoppedTyping: user => {\n                //             this.setState({\n                //                 userTyping: user.name,\n                //                 isUserTyping: false\n                //             })\n                //         }\n                //     }\n                // })\n            })\n            .then(currentRoom => {console.log('current',currentRoom); this.setState({currentRoom})})\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    componentDidUpdate = () => {\n        console.log(this.state.messages)\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        })\n    }\n\n    sendTypingEvent = () => {\n        this.state.currentUser.isTypingIn({\n            roomId: this.state.currentRoom.id\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                Hello {this.props.currentUsername}\n                <MessageList messages={this.state.messages}/>\n                { this.state.isUserTyping ? <TypingIndicator userTyping={this.state.userTyping} /> : '' }\n                <SendMessageForm onSubmit={this.sendMessage} onChange={this.sendTypingEvent} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}