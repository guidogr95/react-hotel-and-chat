{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport { RoomContext } from '../context';\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport { animateScroll } from 'react-scroll';\nimport RSC from 'react-scrollbars-custom';\nexport default class ChatInstance extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'https://express-login.now.sh/chat/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        return currentUser.subscribeToRoom({\n          roomId: this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(room => {\n        this.setState({\n          currentRoom: room\n        });\n      }).catch(error => console.log('Hiiiii', error));\n    });\n\n    _defineProperty(this, \"sendMessage\", text => {\n      this.state.currentUser.sendSimpleMessage({\n        roomId: this.state.currentRoom.id,\n        text\n      }).then(messageId => this.setState({\n        text: ''\n      })).catch(err => console.log('error', err));\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", event => {\n      event.preventDefault();\n      this.sendMessage(this.state.text);\n    });\n\n    _defineProperty(this, \"onEnterPress\", e => {\n      if (e.keyCode == 13 && e.shiftKey == false) {\n        this.onSubmit(e);\n      }\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false,\n      text: '',\n      scrollHeight: 0\n    };\n  }\n\n  componentDidUpdate(prevState, prevProps) {\n    console.log('length', Object.keys(this.state.currentRoom).length);\n\n    if (prevProps.messages.length !== this.state.messages.length) {\n      console.log('prev', prevProps.messages.length);\n      console.log('now', this.state.messages.length);\n\n      if (Object.keys(prevProps.currentRoom).length !== 0) {\n        console.log('height', document.getElementById(`${this.state.currentRoom.createdAt}`).clientHeight);\n        this.setState({\n          scrollHeight: document.getElementById(`${this.state.currentRoom.createdAt}`).clientHeight\n        });\n      }\n    }\n  }\n\n  render() {\n    if (this.state.currentRoom.length === 0) {\n      return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Loading....\");\n    }\n\n    return __jsx(\"div\", {\n      className: this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"chat-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, __jsx(RSC, {\n      scrollTop: this.state.scrollHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, __jsx(\"ul\", {\n      id: this.state.currentRoom.createdAt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.messages.map((message, index) => {\n      const rawId = message.senderId;\n      const Id = rawId.slice(20, rawId.length);\n      return __jsx(\"li\", {\n        className: this.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"chat-msg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"avatar\",\n        onClick: () => console.log(this.state.scrollHeight),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, this.state.currentUser.id == message.senderId ? message.senderId[0] : Id[0]), __jsx(\"div\", {\n        className: \"msg-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.state.currentUser.id == message.senderId ? message.senderId : Id), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, message.text))));\n    })))), __jsx(\"div\", {\n      className: \"chat-input-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, __jsx(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, __jsx(\"textarea\", {\n      onKeyDown: this.onEnterPress,\n      className: \"hidescroll\",\n      name: \"text\",\n      placeholder: \"Your text...\",\n      onChange: this.handleChange,\n      value: this.state.text,\n      autoComplete: \"off\",\n      wrap: \"hard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, __jsx(FaPaperPlane, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\n_defineProperty(ChatInstance, \"contextType\", RoomContext);","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js"],"names":["Component","Chatkit","RoomContext","FaPaperPlane","animateScroll","RSC","ChatInstance","constructor","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","roomInfo","id","messageLimit","hooks","onMessage","message","messages","state","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","room","currentRoom","catch","error","console","log","text","sendSimpleMessage","messageId","err","event","target","value","preventDefault","sendMessage","e","keyCode","shiftKey","onSubmit","scrollHeight","componentDidUpdate","prevState","prevProps","Object","keys","length","document","getElementById","createdAt","clientHeight","render","context","activeWindow","map","index","rawId","senderId","Id","slice","onEnterPress","handleChange"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport { RoomContext } from '../context'\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport { animateScroll } from 'react-scroll'\nimport RSC from 'react-scrollbars-custom'\n\n\nexport default class ChatInstance extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false,\n            text: '',\n            scrollHeight: 0\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'https://express-login.now.sh/chat/authenticate'\n            })\n        })\n        \n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            this.setState({\n                                messages: [...this.state.messages, message],    \n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => {this.setState({currentRoom:room})})\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    componentDidUpdate(prevState, prevProps) {\n        \n        console.log('length', Object.keys(this.state.currentRoom).length )\n        if ( prevProps.messages.length !== this.state.messages.length ) {\n            console.log('prev',prevProps.messages.length)\n            console.log('now',this.state.messages.length)\n            if (Object.keys(prevProps.currentRoom).length !== 0 ) {\n                console.log('height', document.getElementById(`${this.state.currentRoom.createdAt}`).clientHeight)\n                this.setState({\n                    scrollHeight: document.getElementById(`${this.state.currentRoom.createdAt}`).clientHeight\n                })\n\n            }\n\n        }\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then(messageId => this.setState({text:''}))\n        .catch(err => console.log('error', err))\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.sendMessage(this.state.text);\n    }\n\n    onEnterPress = (e) => {\n        if(e.keyCode == 13 && e.shiftKey == false) {\n            this.onSubmit(e);\n          }\n    }\n\n    render() {\n        if (this.state.currentRoom.length === 0) {\n            return <p>Loading....</p>\n        }\n        return (\n            <div className={this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"}>\n                \n                <div className=\"chat-messages\" >\n                <RSC scrollTop={this.state.scrollHeight} >\n                    <ul id={this.state.currentRoom.createdAt} >\n                        {this.state.messages.map((message, index) => {\n                            const rawId = message.senderId;\n                            const Id = rawId.slice(20,rawId.length)\n                            return (\n                                <li className={ this.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\" } key={index}>\n                                    <div className=\"chat-msg\">\n                                        <div className=\"avatar\" onClick={() => console.log(this.state.scrollHeight)} >{ this.state.currentUser.id == message.senderId ? message.senderId[0] : Id[0] }</div>\n                                        <div className=\"msg-content\">\n                                            <span>{this.state.currentUser.id == message.senderId ? message.senderId : Id}</span>\n                                            <p>{message.text}</p>\n                                        </div>\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </RSC>\n                </div>\n                <div className=\"chat-input-text\">\n                    <form onSubmit={this.onSubmit}>\n                            <textarea onKeyDown={this.onEnterPress} className=\"hidescroll\" name=\"text\" placeholder=\"Your text...\" onChange={this.handleChange} value={this.state.text} autoComplete=\"off\" wrap=\"hard\" />\n                            <div className=\"button-container\">\n                                <button type=\"submit\"><FaPaperPlane/></button>\n                            </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}