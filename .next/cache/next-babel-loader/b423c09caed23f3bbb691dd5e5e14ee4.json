{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport TypingIndicator from './TypingIndicator';\nexport default class ChatScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: this.props.userId,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'https://express-login.now.sh/chat/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        console.log(currentUser);\n        return currentUser.createRoom({\n          id: `${currentUser.id}-room`,\n          name: `${currentUser.id}-room`,\n          private: true,\n          addUserIds: [currentUser.id, 'guido']\n        }).then(room => {\n          this.setState({\n            currentRoom: room\n          });\n          return currentUser.subscribeToRoom({\n            roomId: room.id,\n            messageLimit: 100,\n            hooks: {\n              onMessage: message => {\n                console.log(message);\n                this.setState({\n                  messages: [...this.state.messages, message]\n                });\n              },\n              onUserStartedTyping: user => {\n                this.setState({\n                  userTyping: user.name,\n                  isUserTyping: true\n                });\n              },\n              onUserStoppedTyping: user => {\n                this.setState({\n                  userTyping: user.name,\n                  isUserTyping: false\n                });\n              }\n            }\n          }).catch(err => console.log(err));\n        }).catch(err => {\n          console.log('error', err);\n        });\n      }).catch(error => console.log('Hiiiii', error));\n    });\n\n    _defineProperty(this, \"sendMessage\", text => {\n      this.state.currentUser.sendSimpleMessage({\n        roomId: this.state.currentRoom.id,\n        text\n      }).then(messageId => this.setState({\n        text: ''\n      })).catch(err => console.log('error', err));\n    });\n\n    _defineProperty(this, \"sendTypingEvent\", () => {\n      this.state.currentUser.isTypingIn({\n        roomId: this.state.currentRoom.id\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"chat-screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, __jsx(MessageList, {\n      messages: this.state.messages,\n      currentUser: this.state.currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), this.state.isUserTyping ? __jsx(TypingIndicator, {\n      userTyping: this.state.userTyping,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }) : '', __jsx(SendMessageForm, {\n      onSubmit: this.sendMessage,\n      onChange: this.sendTypingEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js"],"names":["Component","Chatkit","MessageList","SendMessageForm","TypingIndicator","ChatScreen","constructor","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","console","log","createRoom","id","name","private","addUserIds","room","currentRoom","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","messages","state","onUserStartedTyping","user","userTyping","isUserTyping","onUserStoppedTyping","catch","err","error","text","sendSimpleMessage","messageId","isTypingIn","render","sendMessage","sendTypingEvent"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n//Components\nimport MessageList from './MessageList'\nimport SendMessageForm from './SendMessageForm'\nimport TypingIndicator from './TypingIndicator'\n\nexport default class ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: this.props.userId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'https://express-login.now.sh/chat/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                console.log(currentUser)\n\n                return currentUser.createRoom({\n                    id: `${currentUser.id}-room`,\n                    name: `${currentUser.id}-room`,\n                    private: true,\n                    addUserIds: [currentUser.id, 'guido']\n                }).then(room => {\n                    this.setState({ currentRoom: room })\n                    return currentUser.subscribeToRoom({\n                    roomId: room.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                }).catch(err => console.log(err))\n                }).catch(err => {\n                    console.log('error', err)\n                })\n            })\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then(messageId => this.setState({text:''}))\n        .catch(err => console.log('error', err))\n    }\n\n    sendTypingEvent = () => {\n        this.state.currentUser.isTypingIn({\n            roomId: this.state.currentRoom.id\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"chat-screen\" >\n                <MessageList messages={this.state.messages} currentUser={this.state.currentUser} />\n                { this.state.isUserTyping ? <TypingIndicator userTyping={this.state.userTyping} /> : '' }\n                <SendMessageForm onSubmit={this.sendMessage} onChange={this.sendTypingEvent} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}