{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport { RoomContext } from '../context';\nimport { FaPaperPlane } from \"react-icons/fa\";\n\nvar ChatInstance = /*#__PURE__*/function (_Component) {\n  _inherits(ChatInstance, _Component);\n\n  function ChatInstance(props) {\n    var _this;\n\n    _classCallCheck(this, ChatInstance);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatInstance).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this.setState({\n          currentUser: currentUser\n        });\n\n        return currentUser.subscribeToRoom({\n          roomId: _this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: function onMessage(message) {\n              _this.setState({\n                messages: [].concat(_toConsumableArray(_this.state.messages), [message])\n              });\n            },\n            onUserStartedTyping: function onUserStartedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: function onUserStoppedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(function (room) {\n        return _this.setState({\n          currentRoom: room\n        });\n      })[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendMessage\", function (text) {\n      _this.state.currentUser.sendSimpleMessage({\n        roomId: _this.state.currentRoom.id,\n        text: text\n      }).then(function (messageId) {\n        return _this.setState({\n          text: ''\n        });\n      })[\"catch\"](function (err) {\n        return console.log('error', err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (event) {\n      event.preventDefault();\n\n      _this.sendMessage(_this.state.text);\n    });\n\n    _this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false,\n      text: ''\n    };\n    return _this;\n  }\n\n  _createClass(ChatInstance, [{\n    key: \"render\",\n    value: function render() {\n      var roomInfo = this.props.roomInfo.roomInfo;\n\n      if (this.state.currentRoom.length === 0) {\n        return __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, \"Loading....\");\n      }\n\n      var adminStyle = {\n        background: \"black\"\n      };\n      return __jsx(\"div\", {\n        className: this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"chat-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.state.messages.map(function (message, index) {\n        console.log(currentUser.id);\n        return __jsx(\"li\", {\n          style: adminStyle,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, message.senderId), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, message.text)));\n      }))), __jsx(\"div\", {\n        className: \"chat-input-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, __jsx(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        name: \"text\",\n        type: \"text\",\n        placeholder: \"Your text...\",\n        onChange: this.handleChange,\n        value: this.state.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"button-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, __jsx(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, __jsx(FaPaperPlane, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ChatInstance;\n}(Component);\n\n_defineProperty(ChatInstance, \"contextType\", RoomContext);\n\nexport { ChatInstance as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js"],"names":["Component","Chatkit","RoomContext","FaPaperPlane","ChatInstance","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","roomInfo","id","messageLimit","hooks","onMessage","message","messages","state","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","room","currentRoom","error","console","log","text","sendSimpleMessage","messageId","err","event","target","value","preventDefault","sendMessage","length","adminStyle","background","context","activeWindow","map","index","senderId","onSubmit","handleChange"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport { RoomContext } from '../context'\nimport { FaPaperPlane } from \"react-icons/fa\";\n\n\nexport default class ChatInstance extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false,\n            text: ''\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n        \n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => this.setState({currentRoom:room}))\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then(messageId => this.setState({text:''}))\n        .catch(err => console.log('error', err))\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.sendMessage(this.state.text);\n    }\n\n\n    render() {\n        const { roomInfo } = this.props.roomInfo\n        if (this.state.currentRoom.length === 0) {\n            return <p>Loading....</p>\n        }\n\n        const adminStyle = {\n            background: \"black\"\n        }\n        \n        return (\n            <div className={this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"}>\n                <div className=\"chat-messages\">\n                    <ul>\n                        {this.state.messages.map((message, index) => {\n                            console.log(currentUser.id)\n                            return (\n                                <li style={adminStyle} key={index}>\n                                    <div>\n                                        <span>{message.senderId}</span>\n                                        <p>{message.text}</p>\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n                <div className=\"chat-input-text\">\n                    <form onSubmit={this.onSubmit}>\n                            <input name=\"text\" type=\"text\" placeholder=\"Your text...\" onChange={this.handleChange} value={this.state.text}/>\n                            <div className=\"button-container\">\n                                <button type=\"submit\"><FaPaperPlane/></button>\n                            </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}