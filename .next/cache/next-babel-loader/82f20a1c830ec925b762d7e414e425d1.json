{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/pages/chat.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useContext, useEffect } from 'react';\nimport chatImg from '../images/chat.jpg';\nimport loading from '../images/gif/loading-arrow.gif';\nimport axios from 'axios';\nimport { RoomContext } from '../context';\nimport Link from 'next/link';\nimport Chatkit from '@pusher/chatkit-client';\nexport default function chat() {\n  var context = useContext(RoomContext);\n\n  var _useState = useState({}),\n      input = _useState[0],\n      setInput = _useState[1];\n\n  var _useState2 = useState(false),\n      btnDisabled = _useState2[0],\n      setbtnDisabled = _useState2[1];\n\n  var _useState3 = useState({}),\n      errors = _useState3[0],\n      setErrors = _useState3[1];\n\n  var _useState4 = useState(null),\n      currentUser = _useState4[0],\n      setCurrentUser = _useState4[1];\n\n  var _useState5 = useState({}),\n      currentRoom = _useState5[0],\n      setCurrentRoom = _useState5[1];\n\n  var style = {\n    backgroundImage: \"url(\" + chatImg + \")\",\n    height: 600,\n    width: \"100%\",\n    padding: \"150px 0 150px 0\"\n  };\n\n  var handleChange = function handleChange(event) {\n    return setInput(_objectSpread({}, input, _defineProperty({}, event.target.name, event.target.value)));\n  };\n\n  useEffect(function () {\n    context.updateCredentials(true);\n  }, []);\n  useEffect(function () {\n    var t;\n\n    if (context.authenticated) {\n      handleChatSession();\n      t = setInterval(function () {\n        console.log('1');\n        handleChatSession();\n      }, 15000);\n      console.log(t);\n    } else if (context.authenticated === null) {} else {\n      console.log(t);\n\n      if (typeof t !== 'undefined') {\n        clearInterval(t);\n      }\n    }\n  }, [context.authenticated]);\n\n  var handleSubmit = function handleSubmit(event) {\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            setbtnDisabled(true);\n            axios({\n              url: 'http://localhost:8000/api/users/login',\n              method: 'POST',\n              data: _JSON$stringify({\n                email: input.email,\n                password: input.password\n              }),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }).then(function (res) {\n              setbtnDisabled(false);\n              context.updateCredentials(false, res.data.userId, res.data.email, res.data.token);\n            })[\"catch\"](function (err) {\n              console.log(err);\n              setErrors(_objectSpread({}, errors, {\n                error: \"No se pudo conectar. Revise sus credenciales\"\n              }));\n              setbtnDisabled(false);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var handleChatSession = function handleChatSession() {\n    var chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n      userId: context.chatUserId,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: 'http://localhost:3001/authenticate'\n      })\n    });\n    chatManager.connect().then(function (currentUser) {\n      setCurrentUser(currentUser);\n      console.log(currentUser); // return currentUser.createRoom({\n      //     id: `${currentUser.id}-room`,\n      //     name: `${currentUser.id}-room`,\n      //     private: true,\n      //     addUserIds: [currentUser.id, 'guido']\n      // }).then(room => {\n      //     setCurrentRoom(room)\n      // //     return currentUser.subscribeToRoom({\n      // //     roomId: room.id,\n      // //     messageLimit: 100,\n      // //     hooks: {\n      // //         onMessage: (message) => {\n      // //             console.log(message)\n      // //             this.setState({\n      // //                 messages: [...this.state.messages, message]\n      // //             })\n      // //         },\n      // //         onUserStartedTyping: user => {\n      // //             this.setState({\n      // //                 userTyping: user.name,\n      // //                 isUserTyping: true\n      // //             })\n      // //         },\n      // //         onUserStoppedTyping: user => {\n      // //             this.setState({\n      // //                 userTyping: user.name,\n      // //                 isUserTyping: false\n      // //             })\n      // //         }\n      // //     }\n      // // })\n      // }).catch(err => {\n      //     console.log('error', err)\n      // })\n    })[\"catch\"](function (error) {\n      return console.log('Hiiiii', error);\n    });\n  };\n\n  var renderForm = function renderForm() {\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Login to Chat\"), _Object$values(errors).map(function (err, index) {\n      return __jsx(\"div\", {\n        key: index,\n        className: \"login-err\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, err);\n    }), __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Email\"), __jsx(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), __jsx(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Password\"), __jsx(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      disabled: btnDisabled,\n      className: btnDisabled ? \"btn-primary submit-btn disabled\" : \"btn-primary submit-btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, btnDisabled ? __jsx(\"img\", {\n      className: \"loading-login\",\n      src: loading,\n      alt: \"loading spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }) : \"Enviar\")));\n  };\n\n  var renderLoggedin = function renderLoggedin() {\n    return __jsx(\"div\", {\n      className: \"signed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"You are logged in\"), __jsx(Link, {\n      href: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: \"btn-primary signed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Go Home\")), __jsx(Link, {\n      href: \"/admin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: \"btn-primary signed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Admin Panel\")), __jsx(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, currentUser ? _Object$values(currentUser.rooms).map(function (room, index) {\n      return __jsx(\"li\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, room.id));\n    }) : ''));\n  };\n\n  if (context.authenticated === null) {\n    return __jsx(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"log-box loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      className: \"loading-spinner\",\n      src: loading,\n      alt: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    })));\n  }\n\n  return __jsx(\"div\", {\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"log-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, context.authenticated ? renderLoggedin() : renderForm()));\n}","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/pages/chat.js"],"names":["useState","useContext","useEffect","chatImg","loading","axios","RoomContext","Link","Chatkit","chat","context","input","setInput","btnDisabled","setbtnDisabled","errors","setErrors","currentUser","setCurrentUser","currentRoom","setCurrentRoom","style","backgroundImage","height","width","padding","handleChange","event","target","name","value","updateCredentials","t","authenticated","handleChatSession","setInterval","console","log","clearInterval","handleSubmit","preventDefault","url","method","data","email","password","headers","then","res","userId","token","err","error","chatManager","ChatManager","instanceLocator","chatUserId","tokenProvider","TokenProvider","connect","renderForm","map","index","renderLoggedin","rooms","room","id"],"mappings":"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","sourcesContent":["import { useState, useContext, useEffect } from 'react'\nimport chatImg from '../images/chat.jpg'\nimport loading from '../images/gif/loading-arrow.gif'\nimport axios from 'axios';\nimport { RoomContext } from '../context'\nimport Link from 'next/link';\nimport Chatkit from '@pusher/chatkit-client'\n\n\nexport default function chat() {\n    const context = useContext(RoomContext);\n    const [input, setInput] = useState({});\n    const [btnDisabled, setbtnDisabled] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [currentUser, setCurrentUser] = useState(null);\n    const [currentRoom, setCurrentRoom] = useState({});\n    const style = {\n        backgroundImage: \"url(\"+ chatImg + \")\",\n        height: 600,\n        width: \"100%\",\n        padding: \"150px 0 150px 0\"\n    };\n    const handleChange = (event) => setInput({\n        ...input,\n        [event.target.name]: event.target.value\n    });\n\n    useEffect(() => {\n        context.updateCredentials(true);\n    }, [])\n\n    useEffect(() => {\n        let t;\n        if ( context.authenticated ) {\n            handleChatSession();\n            t = setInterval(() => {\n                console.log('1')\n                handleChatSession();\n            }, 15000);\n            console.log(t);\n        } else if (context.authenticated === null) {\n\n        } else {\n            console.log(t)\n            if (typeof(t) !== 'undefined') {\n                clearInterval(t);\n            }\n        }\n    }, [context.authenticated])\n    \n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setbtnDisabled(true);\n        axios({\n            url: 'http://localhost:8000/api/users/login',\n            method: 'POST',\n            data: JSON.stringify({\n                email: input.email,\n                password: input.password\n            }),\n            headers: { 'Content-Type': 'application/json'}\n        })\n        .then(res => {\n            setbtnDisabled(false);\n            context.updateCredentials(false, res.data.userId, res.data.email, res.data.token);\n        })\n        .catch(err => {\n            console.log(err);\n            setErrors({\n                ...errors,\n                error: \"No se pudo conectar. Revise sus credenciales\"\n            })\n            setbtnDisabled(false);\n        })\n    }\n\n    const handleChatSession = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: context.chatUserId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                setCurrentUser(currentUser)\n                console.log(currentUser)\n\n                // return currentUser.createRoom({\n                //     id: `${currentUser.id}-room`,\n                //     name: `${currentUser.id}-room`,\n                //     private: true,\n                //     addUserIds: [currentUser.id, 'guido']\n                // }).then(room => {\n                //     setCurrentRoom(room)\n                // //     return currentUser.subscribeToRoom({\n                // //     roomId: room.id,\n                // //     messageLimit: 100,\n                // //     hooks: {\n                // //         onMessage: (message) => {\n                // //             console.log(message)\n                // //             this.setState({\n                // //                 messages: [...this.state.messages, message]\n                // //             })\n                // //         },\n                // //         onUserStartedTyping: user => {\n                // //             this.setState({\n                // //                 userTyping: user.name,\n                // //                 isUserTyping: true\n                // //             })\n                // //         },\n                // //         onUserStoppedTyping: user => {\n                // //             this.setState({\n                // //                 userTyping: user.name,\n                // //                 isUserTyping: false\n                // //             })\n                // //         }\n                // //     }\n                // // })\n                // }).catch(err => {\n                //     console.log('error', err)\n                // })\n            })\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    const renderForm = () => {\n        return (\n            <React.Fragment>\n                <h3>Login to Chat</h3>\n                {\n                Object.values(errors).map((err, index) => {\n                    return <div key={index} className=\"login-err\">{err}</div>\n                })\n                }\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"email\">Email</label>\n                    <input type=\"email\" name=\"email\" id=\"email\" onChange={handleChange}/>\n\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" name=\"password\" id=\"password\" onChange={handleChange}/>\n                    <button disabled={btnDisabled} className={btnDisabled?\"btn-primary submit-btn disabled\":\"btn-primary submit-btn\"} type=\"submit\">{\n                        btnDisabled ?\n                        <img className=\"loading-login\" src={loading} alt=\"loading spinner\"/>:\n                        \"Enviar\"\n                    }</button>\n                </form>\n            </React.Fragment>\n        )\n    }\n    const renderLoggedin = () => {\n        return (\n            <div className=\"signed\">\n                <h3>You are logged in</h3>\n                <Link href=\"/\">\n                    <a className=\"btn-primary signed\">\n                        Go Home\n                    </a>\n                </Link>\n                <Link href=\"/admin\">\n                    <a className=\"btn-primary signed\">\n                        Admin Panel\n                    </a>\n                </Link>\n                <ul>\n                {\n                    currentUser ?\n                    Object.values(currentUser.rooms).map((room, index) => {\n                       return (\n                           <li key={index}>\n                               <p>{room.id}</p>\n                           </li>\n                       )\n                    }) : ''\n                }\n                </ul>\n            </div>\n        )\n    }\n    if (context.authenticated === null) {\n        return (\n            <div style={style}>\n                <div className=\"log-box loading\">\n                <img className=\"loading-spinner\" src={loading} alt=\"loading\"/>\n                </div>\n            </div>\n        )\n    }\n    return (\n        <div style={style}>\n            <div className=\"log-box\">\n                {\n                    context.authenticated ?\n                        renderLoggedin() :\n                        renderForm()\n                }\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}