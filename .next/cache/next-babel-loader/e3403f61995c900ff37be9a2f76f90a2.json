{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/context.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport axios from 'axios';\nconst RoomContext = React.createContext(); // \n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      roomtype: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      PUBLICTOKEN: 'f3341f2f85860e06446a5e86bfd392',\n      authenticated: null,\n      chatUserId: 'guido',\n      activeWindow: '',\n      currentUser: {}\n    });\n\n    _defineProperty(this, \"setCurrentUser\", currentUser => {\n      this.setState({\n        currentUser\n      });\n    });\n\n    _defineProperty(this, \"formatData\", items => {\n      let tempItems = items.map(item => {\n        let id = item.id;\n        let images = item.images.map(image => image.url);\n\n        let room = _objectSpread({}, item, {\n          images,\n          id\n        });\n\n        return room;\n      });\n      return tempItems;\n    });\n\n    _defineProperty(this, \"getRoom\", slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    });\n\n    _defineProperty(this, \"changeWindow\", window => {\n      this.setState({\n        activeWindow: window\n      });\n    });\n\n    _defineProperty(this, \"logOut\", () => {\n      localStorage.removeItem('userData');\n      this.setState({\n        authenticated: false\n      });\n    });\n\n    _defineProperty(this, \"updateCredentials\", (refresh, userId, email, token) => {\n      if (refresh === true) {\n        const userData = JSON.parse(localStorage.getItem('userData'));\n\n        if (userData && userData !== null) {\n          axios({\n            url: 'https://express-login.now.sh/api/users/refresh',\n            method: 'POST',\n            data: JSON.stringify({\n              email: userData.email\n            }),\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${userData.token}`\n            }\n          }).then(res => {\n            localStorage.setItem('userData', JSON.stringify({\n              userId: res.data.userId,\n              email: res.data.email,\n              token: res.data.token\n            }));\n            this.setState({\n              authenticated: true\n            });\n          }).catch(err => {\n            localStorage.removeItem('userData');\n            this.setState({\n              authenticated: false\n            });\n          });\n        } else {\n          this.setState({\n            authenticated: false\n          });\n        }\n      } else {\n        localStorage.setItem('userData', JSON.stringify({\n          userId: userId,\n          email: email,\n          token: token\n        }));\n        this.setState({\n          authenticated: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms); //callback function ^\n    });\n\n    _defineProperty(this, \"filterRooms\", () => {\n      let {\n        rooms,\n        roomtype,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state; //all the rooms\n\n      let tempRooms = [...rooms]; //transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filter by type\n\n      if (roomtype !== 'all') {\n        tempRooms = tempRooms.filter(room => room.roomtype === roomtype);\n      } //filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter extras\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      }\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    });\n  }\n\n  componentDidMount() {\n    const self = this;\n    axios({\n      url: 'https://graphql.datocms.com/',\n      method: 'post',\n      data: {\n        query: `{\n                allRooms {\n                    id\n                    name\n                    slug\n                    price\n                    roomtype\n                    size\n                    capacity\n                    breakfast\n                    pets\n                    featured\n                    description\n                    extras\n                    images {\n                      url\n                    }\n                  }\n                }`\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.state.PUBLICTOKEN}`\n      }\n    }).then(function (response) {\n      // handle success\n      let rooms = self.formatData(response.data.data.allRooms);\n      let featuredRooms = rooms.filter(room => room.featured === true);\n      let maxPrice = Math.max(...rooms.map(item => item.price));\n      let maxSize = Math.max(...rooms.map(item => item.size));\n      self.setState({\n        rooms,\n        featuredRooms,\n        sortedRooms: rooms,\n        loading: false,\n        price: maxPrice,\n        maxPrice,\n        maxSize\n      });\n      return rooms;\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return __jsx(RoomContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getRoom: this.getRoom,\n        handleChange: this.handleChange,\n        updateCredentials: this.updateCredentials,\n        logOut: this.logOut,\n        changeWindow: this.changeWindow,\n        setCurrentUser: this.setCurrentUser\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return __jsx(RoomConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, value => __jsx(Component, _extends({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/context.js"],"names":["React","Component","axios","RoomContext","createContext","RoomProvider","rooms","sortedRooms","featuredRooms","loading","roomtype","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","PUBLICTOKEN","authenticated","chatUserId","activeWindow","currentUser","setState","items","tempItems","map","item","id","images","image","url","room","slug","tempRooms","state","find","window","localStorage","removeItem","refresh","userId","email","token","userData","JSON","parse","getItem","method","data","stringify","headers","then","res","setItem","catch","err","event","target","value","type","checked","name","filterRooms","pets","parseInt","filter","componentDidMount","self","query","response","formatData","allRooms","featured","Math","max","size","error","console","log","render","getRoom","handleChange","updateCredentials","logOut","changeWindow","setCurrentUser","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":";;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,WAAW,GAAGH,KAAK,CAACI,aAAN,EAApB,C,CACA;;AAEA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAAA;AAAA;;AAAA,mCAC3B;AACFK,MAAAA,KAAK,EAAE,EADL;AAEFC,MAAAA,WAAW,EAAE,EAFX;AAGFC,MAAAA,aAAa,EAAE,EAHb;AAIFC,MAAAA,OAAO,EAAE,IAJP;AAKFC,MAAAA,QAAQ,EAAC,KALP;AAMFC,MAAAA,QAAQ,EAAC,CANP;AAOFC,MAAAA,KAAK,EAAC,CAPJ;AAQFC,MAAAA,QAAQ,EAAE,CARR;AASFC,MAAAA,QAAQ,EAAE,CATR;AAUFC,MAAAA,OAAO,EAAE,CAVP;AAWFC,MAAAA,OAAO,EAAE,CAXP;AAYFC,MAAAA,SAAS,EAAE,KAZT;AAaFC,MAAAA,WAAW,EAAE,gCAbX;AAcFC,MAAAA,aAAa,EAAE,IAdb;AAeFC,MAAAA,UAAU,EAAE,OAfV;AAgBFC,MAAAA,YAAY,EAAE,EAhBZ;AAiBFC,MAAAA,WAAW,EAAE;AAjBX,KAD2B;;AAAA,4CAoEfA,WAAD,IAAiB;AAC9B,WAAKC,QAAL,CAAc;AAACD,QAAAA;AAAD,OAAd;AACH,KAtEgC;;AAAA,wCAuEnBE,KAAD,IAAW;AACpB,UAAIC,SAAS,GAAGD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAI;AAC9B,YAAIC,EAAE,GAAGD,IAAI,CAACC,EAAd;AACA,YAAIC,MAAM,GAAGF,IAAI,CAACE,MAAL,CAAYH,GAAZ,CAAgBI,KAAK,IAAIA,KAAK,CAACC,GAA/B,CAAb;;AACA,YAAIC,IAAI,qBAAOL,IAAP;AAAYE,UAAAA,MAAZ;AAAmBD,UAAAA;AAAnB,UAAR;;AACA,eAAOI,IAAP;AACH,OALe,CAAhB;AAMA,aAAOP,SAAP;AACH,KA/EgC;;AAAA,qCAgFtBQ,IAAD,IAAU;AAChB,UAAIC,SAAS,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAW7B,KAAf,CAAhB;AACA,YAAM0B,IAAI,GAAGE,SAAS,CAACE,IAAV,CAAeJ,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcA,IAArC,CAAb;AACA,aAAOD,IAAP;AAEH,KArFgC;;AAAA,0CAuFjBK,MAAD,IAAY;AACvB,WAAKd,QAAL,CAAc;AACVF,QAAAA,YAAY,EAAEgB;AADJ,OAAd;AAGH,KA3FgC;;AAAA,oCA6FxB,MAAM;AACXC,MAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA,WAAKhB,QAAL,CAAc;AAACJ,QAAAA,aAAa,EAAE;AAAhB,OAAd;AACH,KAhGgC;;AAAA,+CAkGb,CAACqB,OAAD,EAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,KAAzB,KAAmC;AACnD,UAAIH,OAAO,KAAK,IAAhB,EAAsB;AAClB,cAAMI,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWR,YAAY,CAACS,OAAb,CAAqB,UAArB,CAAX,CAAjB;;AACA,YAAIH,QAAQ,IAAIA,QAAQ,KAAK,IAA7B,EAAmC;AAC/B1C,UAAAA,KAAK,CAAC;AACF6B,YAAAA,GAAG,EAAE,gDADH;AAEFiB,YAAAA,MAAM,EAAE,MAFN;AAGFC,YAAAA,IAAI,EAAEJ,IAAI,CAACK,SAAL,CAAe;AACjBR,cAAAA,KAAK,EAAEE,QAAQ,CAACF;AADC,aAAf,CAHJ;AAMFS,YAAAA,OAAO,EAAE;AAAE,8BAAgB,kBAAlB;AAAsC,+BAAkB,UAASP,QAAQ,CAACD,KAAM;AAAhF;AANP,WAAD,CAAL,CAQCS,IARD,CAQMC,GAAG,IAAI;AACTf,YAAAA,YAAY,CAACgB,OAAb,CAAqB,UAArB,EAAiCT,IAAI,CAACK,SAAL,CAAe;AAACT,cAAAA,MAAM,EAAEY,GAAG,CAACJ,IAAJ,CAASR,MAAlB;AAA0BC,cAAAA,KAAK,EAAEW,GAAG,CAACJ,IAAJ,CAASP,KAA1C;AAAiDC,cAAAA,KAAK,EAAEU,GAAG,CAACJ,IAAJ,CAASN;AAAjE,aAAf,CAAjC;AACA,iBAAKpB,QAAL,CAAc;AAACJ,cAAAA,aAAa,EAAE;AAAhB,aAAd;AACH,WAXD,EAYCoC,KAZD,CAYOC,GAAG,IAAI;AACVlB,YAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA,iBAAKhB,QAAL,CAAc;AAACJ,cAAAA,aAAa,EAAE;AAAhB,aAAd;AACH,WAfD;AAgBH,SAjBD,MAiBO;AACH,eAAKI,QAAL,CAAc;AAACJ,YAAAA,aAAa,EAAE;AAAhB,WAAd;AACH;AACJ,OAtBD,MAsBO;AACHmB,QAAAA,YAAY,CAACgB,OAAb,CAAqB,UAArB,EAAiCT,IAAI,CAACK,SAAL,CAAe;AAACT,UAAAA,MAAM,EAAEA,MAAT;AAAiBC,UAAAA,KAAK,EAAEA,KAAxB;AAA+BC,UAAAA,KAAK,EAAEA;AAAtC,SAAf,CAAjC;AACA,aAAKpB,QAAL,CAAc;AACVJ,UAAAA,aAAa,EAAE;AADL,SAAd;AAGH;AACJ,KA/HgC;;AAAA,0CAkIlBsC,KAAK,IAAI;AACpB,YAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,YAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,KAAgB,UAAhB,GAA6BF,MAAM,CAACG,OAApC,GACdH,MAAM,CAACC,KADP;AAEA,YAAMG,IAAI,GAAGL,KAAK,CAACC,MAAN,CAAaI,IAA1B;AACA,WAAKvC,QAAL,CAAc;AACV,SAACuC,IAAD,GAAQH;AADE,OAAd,EAEE,KAAKI,WAFP,EALoB,CAQpB;AACH,KA3IgC;;AAAA,yCA4InB,MAAM;AAChB,UAAI;AACAzD,QAAAA,KADA;AACMI,QAAAA,QADN;AACeC,QAAAA,QADf;AACwBC,QAAAA,KADxB;AAC8BG,QAAAA,OAD9B;AACsCC,QAAAA,OADtC;AAC8CC,QAAAA,SAD9C;AACwD+C,QAAAA;AADxD,UAEA,KAAK7B,KAFT,CADgB,CAIhB;;AACA,UAAID,SAAS,GAAG,CAAC,GAAG5B,KAAJ,CAAhB,CALgB,CAMhB;;AACAK,MAAAA,QAAQ,GAAGsD,QAAQ,CAACtD,QAAD,CAAnB;AACAC,MAAAA,KAAK,GAAGqD,QAAQ,CAACrD,KAAD,CAAhB,CARgB,CAShB;;AACA,UAAIF,QAAQ,KAAK,KAAjB,EAAwB;AACpBwB,QAAAA,SAAS,GAAGA,SAAS,CAACgC,MAAV,CAAiBlC,IAAI,IAAIA,IAAI,CAACtB,QAAL,KAAkBA,QAA3C,CAAZ;AACH,OAZe,CAahB;;;AACA,UAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAChBuB,QAAAA,SAAS,GAAGA,SAAS,CAACgC,MAAV,CAAiBlC,IAAI,IAAIA,IAAI,CAACrB,QAAL,IAAiBA,QAA1C,CAAZ;AACH,OAhBe,CAiBhB;;;AACAuB,MAAAA,SAAS,GAAEA,SAAS,CAACgC,MAAV,CAAiBlC,IAAI,IAAIA,IAAI,CAACpB,KAAL,IAAcA,KAAvC,CAAX,CAlBgB,CAmBhB;;AACA,UAAKK,SAAL,EAAiB;AACbiB,QAAAA,SAAS,GAAGA,SAAS,CAACgC,MAAV,CAAiBlC,IAAI,IAAIA,IAAI,CAACf,SAAL,KAAmB,IAA5C,CAAZ;AACH;;AACD,UAAK+C,IAAL,EAAY;AACR9B,QAAAA,SAAS,GAAGA,SAAS,CAACgC,MAAV,CAAiBlC,IAAI,IAAIA,IAAI,CAACgC,IAAL,KAAc,IAAvC,CAAZ;AACH;;AACD,WAAKzC,QAAL,CAAc;AACVhB,QAAAA,WAAW,EAAE2B;AADH,OAAd;AAGH,KAzKgC;AAAA;;AAoBjCiC,EAAAA,iBAAiB,GAAE;AACf,UAAMC,IAAI,GAAG,IAAb;AACAlE,IAAAA,KAAK,CAAC;AACF6B,MAAAA,GAAG,EAAE,8BADH;AAEFiB,MAAAA,MAAM,EAAE,MAFN;AAGFC,MAAAA,IAAI,EAAE;AACJoB,QAAAA,KAAK,EAAG;;;;;;;;;;;;;;;;;;;AADJ,OAHJ;AAwBFlB,MAAAA,OAAO,EAAE;AAAE,wBAAgB,kBAAlB;AAAsC,kBAAU,kBAAhD;AAAoE,yBAAkB,UAAS,KAAKhB,KAAL,CAAWjB,WAAY;AAAtH;AAxBP,KAAD,CAAL,CA0BCkC,IA1BD,CA0BM,UAAUkB,QAAV,EAAoB;AACxB;AACA,UAAIhE,KAAK,GAAG8D,IAAI,CAACG,UAAL,CAAgBD,QAAQ,CAACrB,IAAT,CAAcA,IAAd,CAAmBuB,QAAnC,CAAZ;AACA,UAAIhE,aAAa,GAAGF,KAAK,CAAC4D,MAAN,CAAalC,IAAI,IAAIA,IAAI,CAACyC,QAAL,KAAkB,IAAvC,CAApB;AACE,UAAI3D,QAAQ,GAAG4D,IAAI,CAACC,GAAL,CAAS,GAAGrE,KAAK,CAACoB,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACf,KAAvB,CAAZ,CAAf;AACA,UAAII,OAAO,GAAG0D,IAAI,CAACC,GAAL,CAAS,GAAGrE,KAAK,CAACoB,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACiD,IAAvB,CAAZ,CAAd;AACAR,MAAAA,IAAI,CAAC7C,QAAL,CAAc;AACVjB,QAAAA,KADU;AAEVE,QAAAA,aAFU;AAGVD,QAAAA,WAAW,EAAED,KAHH;AAIVG,QAAAA,OAAO,EAAE,KAJC;AAKVG,QAAAA,KAAK,EAAEE,QALG;AAMVA,QAAAA,QANU;AAOVE,QAAAA;AAPU,OAAd;AASF,aAAOV,KAAP;AACD,KA1CD,EA0CGiD,KA1CH,CA0CSsB,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KA5CD;AA6CH;;AAuGDG,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,WAAD,CAAa,QAAb;AACI,MAAA,KAAK,oBACE,KAAK7C,KADP;AAED8C,QAAAA,OAAO,EAAE,KAAKA,OAFb;AAGDC,QAAAA,YAAY,EAAE,KAAKA,YAHlB;AAIDC,QAAAA,iBAAiB,EAAE,KAAKA,iBAJvB;AAKDC,QAAAA,MAAM,EAAE,KAAKA,MALZ;AAMDC,QAAAA,YAAY,EAAE,KAAKA,YANlB;AAODC,QAAAA,cAAc,EAAE,KAAKA;AAPpB,QADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWK,KAAKC,KAAL,CAAWC,QAXhB,CADJ;AAeH;;AA1LgC;;AA6LrC,MAAMC,YAAY,GAAGtF,WAAW,CAACuF,QAAjC;AAEA,OAAO,SAASC,gBAAT,CAA0B1F,SAA1B,EAAqC;AACxC,SAAO,SAAS2F,eAAT,CAAyBL,KAAzB,EAAgC;AACnC,WAAO,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACF5B,KAAK,IAAI,MAAC,SAAD,eAAe4B,KAAf;AAAsB,MAAA,OAAO,EAAE5B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADP,CAAP;AAGH,GAJD;AAKH;AAED,SAAQtD,YAAR,EAAsBoF,YAAtB,EAAoCtF,WAApC","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport axios from 'axios'\n\nconst RoomContext = React.createContext();\n// \n\nclass RoomProvider extends Component {\n    state={\n        rooms: [],\n        sortedRooms: [],\n        featuredRooms: [],\n        loading: true,\n        roomtype:'all',\n        capacity:1,\n        price:0,\n        minPrice: 0,\n        maxPrice: 0,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        PUBLICTOKEN: 'f3341f2f85860e06446a5e86bfd392',\n        authenticated: null,\n        chatUserId: 'guido',\n        activeWindow: '',\n        currentUser: {}\n    }\n    componentDidMount(){\n        const self = this;\n        axios({\n            url: 'https://graphql.datocms.com/',\n            method: 'post',\n            data: {\n              query: `{\n                allRooms {\n                    id\n                    name\n                    slug\n                    price\n                    roomtype\n                    size\n                    capacity\n                    breakfast\n                    pets\n                    featured\n                    description\n                    extras\n                    images {\n                      url\n                    }\n                  }\n                }`\n            },\n            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': `Bearer ${this.state.PUBLICTOKEN}`,}\n          })\n        .then(function (response) {\n          // handle success\n          let rooms = self.formatData(response.data.data.allRooms);\n          let featuredRooms = rooms.filter(room => room.featured === true);\n            let maxPrice = Math.max(...rooms.map(item => item.price));\n            let maxSize = Math.max(...rooms.map(item => item.size));\n            self.setState({\n                rooms,\n                featuredRooms,\n                sortedRooms: rooms,\n                loading: false,\n                price: maxPrice,\n                maxPrice,\n                maxSize\n            })\n          return rooms\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n    setCurrentUser = (currentUser) => {\n        this.setState({currentUser})\n    }\n    formatData = (items) => {\n        let tempItems = items.map(item => {\n            let id = item.id;\n            let images = item.images.map(image => image.url);\n            let room = {...item,images,id};\n            return room;\n        });\n        return tempItems;\n    }\n    getRoom = (slug) => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug === slug);\n        return room;\n\n    }\n\n    changeWindow = (window) => {\n        this.setState({\n            activeWindow: window\n        })\n    }\n\n    logOut = () => {\n        localStorage.removeItem('userData');\n        this.setState({authenticated: false}) \n    }\n\n    updateCredentials = (refresh, userId, email, token) => {\n        if (refresh === true) {\n            const userData = JSON.parse(localStorage.getItem('userData'));\n            if (userData && userData !== null) {\n                axios({\n                    url: 'https://express-login.now.sh/api/users/refresh',\n                    method: 'POST',\n                    data: JSON.stringify({\n                        email: userData.email\n                    }),\n                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${userData.token}`}\n                })\n                .then(res => {\n                    localStorage.setItem('userData', JSON.stringify({userId: res.data.userId, email: res.data.email, token: res.data.token}));\n                    this.setState({authenticated: true})\n                })\n                .catch(err => {\n                    localStorage.removeItem('userData');\n                    this.setState({authenticated: false})    \n                })\n            } else {\n                this.setState({authenticated: false})\n            }\n        } else {\n            localStorage.setItem('userData', JSON.stringify({userId: userId, email: email, token: token}));\n            this.setState({\n                authenticated: true\n            })\n        }\n    }\n    \n\n    handleChange = event => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked :\n        target.value\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        },this.filterRooms)\n        //callback function ^\n    }\n    filterRooms = () => {\n        let {\n            rooms,roomtype,capacity,price,minSize,maxSize,breakfast,pets\n        } = this.state\n        //all the rooms\n        let tempRooms = [...rooms];\n        //transform value\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n        //filter by type\n        if (roomtype !== 'all') {\n            tempRooms = tempRooms.filter(room => room.roomtype === roomtype)\n        }\n        //filter by capacity\n        if (capacity !== 1) {\n            tempRooms = tempRooms.filter(room => room.capacity >= capacity)\n        }\n        //filter by price\n        tempRooms= tempRooms.filter(room => room.price <= price )\n        //filter extras\n        if ( breakfast ) {\n            tempRooms = tempRooms.filter(room => room.breakfast === true)\n        }\n        if ( pets ) {\n            tempRooms = tempRooms.filter(room => room.pets === true)\n        }\n        this.setState({\n            sortedRooms: tempRooms\n        })\n    }\n    render() {\n        return (\n            <RoomContext.Provider \n                value={{\n                    ...this.state,\n                    getRoom: this.getRoom,\n                    handleChange: this.handleChange,\n                    updateCredentials: this.updateCredentials,\n                    logOut: this.logOut,\n                    changeWindow: this.changeWindow,\n                    setCurrentUser: this.setCurrentUser\n                }}\n            >\n                {this.props.children}\n            </RoomContext.Provider>\n        )\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component) {\n    return function ConsumerWrapper(props) {\n        return <RoomConsumer>\n            {value => <Component {...props} context={value}/>}\n        </RoomConsumer>\n    }\n}\n\nexport{ RoomProvider, RoomConsumer, RoomContext };\n"]},"metadata":{},"sourceType":"module"}