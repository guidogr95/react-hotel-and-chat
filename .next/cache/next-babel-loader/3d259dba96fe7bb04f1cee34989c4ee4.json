{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport { RoomContext } from '../context';\nimport ChatRoomButton from './ChatRoomButton';\n\nvar ChatList = /*#__PURE__*/function (_Component) {\n  _inherits(ChatList, _Component);\n\n  function ChatList(props) {\n    var _this;\n\n    _classCallCheck(this, ChatList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"useForceUpdate\", function () {\n      _this.setState({\n        update: _this.state.update + 1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"switchChat\", function (event) {\n      _this.context.changeWindow(event.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addCheckedChat\", function (chatRoom) {\n      console.log('added', chatRoom);\n\n      _this.setState({\n        checkedChats: [].concat(_toConsumableArray(_this.state.checkedChats), [chatRoom])\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeCheckedChat\", function (chatRoom) {\n      var filtered = _this.state.checkedChats.filter(function (room) {\n        return room.id !== chatRoom.id;\n      });\n\n      console.log(filtered);\n\n      _this.setState({\n        checkedChats: filtered\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteChats\", function () {\n      _this.state.checkedChats.map(function (chat) {\n        _this.props.currentUser.deleteRoom({\n          roomId: chat.id\n        }).then(function () {\n          console.log(\"Deleted room with ID: \".concat(chat.id));\n        })[\"catch\"](function (err) {\n          console.log(\"Error deleted room \".concat(chat.id, \": \").concat(err));\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCheckAll\", function () {\n      _this.setState({\n        checkAll: !_this.state.checkAll\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearAll\", function () {\n      _this.setState({\n        checkedChats: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"seeList\", function () {\n      console.log(_this.state.checkedChats);\n    });\n\n    _this.state = {\n      activeWindow: '',\n      chatRooms: [],\n      checkAll: false,\n      update: 0\n    };\n    return _this;\n  }\n\n  _createClass(ChatList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props.currentUser.rooms);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.currentUser !== this.props.currentUser && this.props.currentUser !== null && this.props.currentUser.rooms.length > 1) {\n        var chatWindow = this.props.currentUser.rooms.find(function (room) {\n          return room.id !== '992194b2-feaa-4842-a546-5c3482ae69c4';\n        });\n        this.context.changeWindow(chatWindow.id);\n      }\n\n      if (prevState.update !== this.state.update) {}\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var currentUser = this.props.currentUser;\n      return __jsx(\"div\", {\n        className: \"chat-list-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"checkbox\",\n        name: \"checkAll\",\n        id: \"chat-checkbox\",\n        checked: this.state.checkAll,\n        onChange: this.handleCheckAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), __jsx(\"button\", {\n        onClick: this.deleteChats,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Delete Chats\")), __jsx(\"ul\", {\n        className: \"chatrooms-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, currentUser ? _Object$values(currentUser.rooms).map(function (room, index) {\n        if (room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45') {\n          s;\n          return __jsx(ChatRoomButton, {\n            key: index,\n            room: room,\n            see: _this2.seeList,\n            checkAll: _this2.state.checkAll,\n            onClick: _this2.switchChat,\n            update: _this2.useForceUpdate,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97\n            },\n            __self: this\n          });\n        }\n      }) : 'Loading...'));\n    }\n  }]);\n\n  return ChatList;\n}(Component);\n\n_defineProperty(ChatList, \"contextType\", RoomContext);\n\nexport { ChatList as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatList.js"],"names":["Component","RoomContext","ChatRoomButton","ChatList","props","setState","update","state","event","context","changeWindow","target","value","chatRoom","console","log","checkedChats","filtered","filter","room","id","map","chat","currentUser","deleteRoom","roomId","then","err","checkAll","activeWindow","chatRooms","rooms","prevProps","prevState","length","chatWindow","find","handleCheckAll","deleteChats","index","s","seeList","switchChat","useForceUpdate"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport { RoomContext } from '../context';\nimport ChatRoomButton from './ChatRoomButton';\n\nexport default class ChatList extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            activeWindow: '',\n            chatRooms: [],\n            checkAll: false,\n            update: 0\n        }\n        \n    }\n\n    componentDidMount() {\n        console.log(this.props.currentUser.rooms)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        \n        if ( (prevProps.currentUser !== this.props.currentUser) && this.props.currentUser !== null && this.props.currentUser.rooms.length > 1) {\n            const chatWindow = this.props.currentUser.rooms.find(room => room.id !== '992194b2-feaa-4842-a546-5c3482ae69c4' )\n            this.context.changeWindow(chatWindow.id)\n        }\n\n        if ( prevState.update !== this.state.update ) {\n\n        }\n    }\n\n    useForceUpdate = () => {\n        this.setState({update: this.state.update + 1})\n    }\n\n    switchChat = (event) => {\n        this.context.changeWindow(event.target.value)\n    }\n\n    addCheckedChat = (chatRoom) => {\n        console.log('added', chatRoom)\n        this.setState({\n            checkedChats: [...this.state.checkedChats, chatRoom]\n        })\n    }\n\n    removeCheckedChat = (chatRoom) => {\n        const filtered = this.state.checkedChats.filter(room => room.id !== chatRoom.id)        \n        console.log(filtered)\n        this.setState({\n            checkedChats: filtered\n        })\n    }\n\n    deleteChats = () => {\n\n        this.state.checkedChats.map(chat => {\n            this.props.currentUser.deleteRoom({ roomId: chat.id })\n            .then(() => {\n                console.log(`Deleted room with ID: ${chat.id}`)\n            })\n            .catch(err => {\n                console.log(`Error deleted room ${chat.id}: ${err}`)\n            })\n        })\n    }\n\n    handleCheckAll = () => {\n        this.setState({ checkAll: !this.state.checkAll })\n    }\n\n    clearAll = () => {\n        this.setState({ checkedChats: [] })\n    }\n\n    seeList = () => {\n        console.log(this.state.checkedChats)\n    }\n\n    render() {\n        const { currentUser } = this.props\n        return (\n            <div className=\"chat-list-container\">\n                <div>\n                    <input type=\"checkbox\" name=\"checkAll\" id=\"chat-checkbox\" checked={this.state.checkAll} onChange={this.handleCheckAll}/>\n                    <button onClick={this.deleteChats} >Delete Chats</button>\n                </div>\n                <ul className=\"chatrooms-container\">\n\n                {\n                    currentUser ?\n                    Object.values(currentUser.rooms).map((room, index) => {\n                        if ( room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45' ) {s\n                            return (\n                                <ChatRoomButton key={index} room={room} see={this.seeList} checkAll={this.state.checkAll} onClick={this.switchChat} update={this.useForceUpdate} />\n                            )\n                        }\n                    }) : 'Loading...'\n                }\n                </ul>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}