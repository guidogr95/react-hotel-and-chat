{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport { RoomContext } from '../context';\n\nvar ChatInstance = /*#__PURE__*/function (_Component) {\n  _inherits(ChatInstance, _Component);\n\n  function ChatInstance(props) {\n    var _this;\n\n    _classCallCheck(this, ChatInstance);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatInstance).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      }); // console.log(this.props)\n\n      chatManager.connect().then(function (currentUser) {\n        _this.setState({\n          currentUser: currentUser\n        });\n\n        return currentUser.subscribeToRoom({\n          roomId: _this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: function onMessage(message) {\n              console.log(message);\n\n              _this.setState({\n                messages: [].concat(_toConsumableArray(_this.state.messages), [message])\n              });\n            },\n            onUserStartedTyping: function onUserStartedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: function onUserStoppedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(function (room) {\n        return _this.setState({\n          currentRoom: room\n        });\n      })[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n    return _this;\n  }\n\n  _createClass(ChatInstance, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(this.context);\n      console.log(this.state.currentRoom);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var roomInfo = this.props.roomInfo.roomInfo;\n\n      if (this.state.currentRoom.length === 0) {\n        return __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, \"Loading....\");\n      }\n\n      return __jsx(\"div\", {\n        className: this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, this.state.messages.map(function (message, index) {\n        return __jsx(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, message.senderId), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, message.text)));\n      })));\n    }\n  }]);\n\n  return ChatInstance;\n}(Component);\n\n_defineProperty(ChatInstance, \"contextType\", RoomContext);\n\nexport { ChatInstance as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js"],"names":["Component","Chatkit","RoomContext","ChatInstance","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","roomInfo","id","messageLimit","hooks","onMessage","message","console","log","messages","state","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","room","currentRoom","error","context","length","activeWindow","map","index","senderId","text"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport { RoomContext } from '../context';\n\nexport default class ChatInstance extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n        // console.log(this.props)\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => this.setState({currentRoom:room}))\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    componentDidUpdate() {\n        console.log(this.context)\n        console.log(this.state.currentRoom)\n    }\n\n    render() {\n        const { roomInfo } = this.props.roomInfo\n        if (this.state.currentRoom.length === 0) {\n            return <p>Loading....</p>\n        }\n        \n        return (\n            <div className={this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"}>\n                <ul>\n                {this.state.messages.map((message, index) => {\n                    return (\n                        <li key={index}>\n                            <div>\n                                <span>{message.senderId}</span>\n                                <p>{message.text}</p>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}