{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\n\nvar ChatInstance = /*#__PURE__*/function (_Component) {\n  _inherits(ChatInstance, _Component);\n\n  function ChatInstance(props) {\n    var _this;\n\n    _classCallCheck(this, ChatInstance);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatInstance).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      }); // console.log(this.props)\n\n      chatManager.connect().then(function (currentUser) {\n        _this.setState({\n          currentUser: currentUser\n        });\n\n        return currentUser.subscribeToRoom({\n          roomId: _this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: function onMessage(message) {\n              console.log(message);\n\n              _this.setState({\n                messages: [].concat(_toConsumableArray(_this.state.messages), [message])\n              });\n            },\n            onUserStartedTyping: function onUserStartedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: function onUserStoppedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(function (room) {\n        return _this.setState({\n          currentRoom: room\n        });\n      })[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n    return _this;\n  }\n\n  _createClass(ChatInstance, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {// console.log(this.state.messages)\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var roomInfo = this.props.roomInfo.roomInfo;\n      return __jsx(\"div\", {\n        className: \"chat-instance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, this.state.messages.length > 0 ? _Object$values(this.state.messages).map(function (message, index) {\n        return __jsx(\"p\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, message);\n      }) : 'Loading');\n    }\n  }]);\n\n  return ChatInstance;\n}(Component);\n\nexport { ChatInstance as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js"],"names":["Component","Chatkit","ChatInstance","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","roomInfo","id","messageLimit","hooks","onMessage","message","console","log","messages","state","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","room","currentRoom","error","length","map","index"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,wBAApB;;IAEqBC,Y;;;AACjB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,sFAAMA,KAAN;;AADe,wEAWC,YAAM;AACtB,UAAMC,WAAW,GAAG,IAAIH,OAAO,CAACI,WAAZ,CAAwB;AACxCC,QAAAA,eAAe,EAAE,6CADuB;AAExCC,QAAAA,MAAM,EAAE,OAFgC;AAGxCC,QAAAA,aAAa,EAAE,IAAIP,OAAO,CAACQ,aAAZ,CAA0B;AACrCC,UAAAA,GAAG,EAAE;AADgC,SAA1B;AAHyB,OAAxB,CAApB,CADsB,CAQtB;;AACAN,MAAAA,WAAW,CACNO,OADL,GAEKC,IAFL,CAEU,UAAAC,WAAW,EAAI;AACjB,cAAKC,QAAL,CAAc;AAACD,UAAAA,WAAW,EAAXA;AAAD,SAAd;;AACA,eAAOA,WAAW,CAACE,eAAZ,CAA4B;AAC/BC,UAAAA,MAAM,EAAE,MAAKb,KAAL,CAAWc,QAAX,CAAoBC,EADG;AAE/BC,UAAAA,YAAY,EAAE,GAFiB;AAG/BC,UAAAA,KAAK,EAAE;AACHC,YAAAA,SAAS,EAAE,mBAACC,OAAD,EAAa;AACpBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,oBAAKR,QAAL,CAAc;AACVW,gBAAAA,QAAQ,+BAAM,MAAKC,KAAL,CAAWD,QAAjB,IAA2BH,OAA3B;AADE,eAAd;AAGH,aANE;AAOHK,YAAAA,mBAAmB,EAAE,6BAAAC,IAAI,EAAI;AACzB,oBAAKd,QAAL,CAAc;AACVe,gBAAAA,UAAU,EAAED,IAAI,CAACE,IADP;AAEVC,gBAAAA,YAAY,EAAE;AAFJ,eAAd;AAIH,aAZE;AAaHC,YAAAA,mBAAmB,EAAE,6BAAAJ,IAAI,EAAI;AACzB,oBAAKd,QAAL,CAAc;AACVe,gBAAAA,UAAU,EAAED,IAAI,CAACE,IADP;AAEVC,gBAAAA,YAAY,EAAE;AAFJ,eAAd;AAIH;AAlBE;AAHwB,SAA5B,CAAP;AAwBH,OA5BL,EA6BKnB,IA7BL,CA6BU,UAAAqB,IAAI;AAAA,eAAI,MAAKnB,QAAL,CAAc;AAACoB,UAAAA,WAAW,EAACD;AAAb,SAAd,CAAJ;AAAA,OA7Bd,WA8BW,UAAAE,KAAK;AAAA,eAAIZ,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBW,KAAtB,CAAJ;AAAA,OA9BhB;AA+BH,KAnDkB;;AAEf,UAAKT,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAE,EADD;AAETS,MAAAA,WAAW,EAAE,EAFJ;AAGTrB,MAAAA,WAAW,EAAE,EAHJ;AAITgB,MAAAA,UAAU,EAAE,EAJH;AAKTE,MAAAA,YAAY,EAAE;AALL,KAAb;AAFe;AASlB;;;;yCA4CoB,CACjB;AACH;;;6BAEQ;AAAA,UACGd,QADH,GACgB,KAAKd,KAAL,CAAWc,QAD3B,CACGA,QADH;AAEL,aACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,KAAKS,KAAL,CAAWD,QAAX,CAAoBW,MAApB,GAA6B,CAA7B,GACA,eAAc,KAAKV,KAAL,CAAWD,QAAzB,EAAmCY,GAAnC,CAAuC,UAACf,OAAD,EAAUgB,KAAV,EAAoB;AACvD,eAAO;AAAG,UAAA,GAAG,EAAEA,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAgBhB,OAAhB,CAAP;AACH,OAFD,CADA,GAGK,SALb,CADJ;AAUH;;;;EAtEqCtB,S;;SAArBE,Y","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n\nexport default class ChatInstance extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n        // console.log(this.props)\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => this.setState({currentRoom:room}))\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    componentDidUpdate() {\n        // console.log(this.state.messages)\n    }\n\n    render() {\n        const { roomInfo } = this.props.roomInfo\n        return (\n            <div className=\"chat-instance\">\n                {\n                    this.state.messages.length > 0 ?\n                    Object.values(this.state.messages).map((message, index) => {\n                        return <p key={index}>{message}</p>\n                    }) : 'Loading'\n                }\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}