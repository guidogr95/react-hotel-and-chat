{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { RoomContext } from '../context';\nimport ChatRoomButton from './ChatRoomButton';\nexport default class ChatList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"switchChat\", event => {\n      this.context.changeWindow(event.target.value);\n    });\n\n    _defineProperty(this, \"addCheckedChat\", chat => {\n      const addedChat = {\n        id: chat\n      };\n      this.setState({\n        checkedChats: [...this.state.checkedChats, addedChat]\n      });\n    });\n\n    _defineProperty(this, \"removeCheckedChat\", chat => {\n      const filtered = this.state.checkedChats.filter(room => room.id !== chat);\n      console.log(filtered);\n      this.setState({\n        checkedChats: filtered\n      });\n    });\n\n    _defineProperty(this, \"deleteChats\", () => {\n      this.state.checkedChats.map(chat => {\n        console.log(chat.id);\n      }); // this.props.currentUser.deleteRoom({ roomId: someRoomID })\n      //     .then(() => {\n      //         console.log(`Deleted room with ID: ${someRoomID}`)\n      //     })\n      //     .catch(err => {\n      //         console.log(`Error deleted room ${someRoomID}: ${err}`)\n      //     })\n    });\n\n    _defineProperty(this, \"seeList\", () => {\n      console.log(this.state.checkedChats);\n    });\n\n    this.state = {\n      activeWindow: '',\n      checkedChats: []\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentUser !== this.props.currentUser && this.props.currentUser !== null && this.props.currentUser.rooms.length > 1) {\n      const chatWindow = this.props.currentUser.rooms.find(room => room.id !== '992194b2-feaa-4842-a546-5c3482ae69c4');\n      this.context.changeWindow(chatWindow.id);\n    }\n  }\n\n  render() {\n    const {\n      currentUser\n    } = this.props;\n    return __jsx(\"ul\", {\n      className: \"chatrooms-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, currentUser ? Object.values(currentUser.rooms).map((room, index) => {\n      if (room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45') {\n        return __jsx(ChatRoomButton, {\n          key: index,\n          room: room,\n          see: this.seeList,\n          onClick: this.switchChat,\n          check: this.addCheckedChat,\n          uncheck: this.removeCheckedChat,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n      }\n    }) : 'Loading...');\n  }\n\n}\n\n_defineProperty(ChatList, \"contextType\", RoomContext);","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatList.js"],"names":["Component","RoomContext","ChatRoomButton","ChatList","constructor","props","event","context","changeWindow","target","value","chat","addedChat","id","setState","checkedChats","state","filtered","filter","room","console","log","map","activeWindow","componentDidUpdate","prevProps","currentUser","rooms","length","chatWindow","find","render","Object","values","index","seeList","switchChat","addCheckedChat","removeCheckedChat"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport { RoomContext } from '../context';\nimport ChatRoomButton from './ChatRoomButton';\n\nexport default class ChatList extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            activeWindow: '',\n            checkedChats: []\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        \n        if ( (prevProps.currentUser !== this.props.currentUser) && this.props.currentUser !== null && this.props.currentUser.rooms.length > 1) {\n            const chatWindow = this.props.currentUser.rooms.find(room => room.id !== '992194b2-feaa-4842-a546-5c3482ae69c4' )\n            this.context.changeWindow(chatWindow.id)\n        }\n    }\n\n    switchChat = (event) => {\n        this.context.changeWindow(event.target.value)\n    }\n\n    addCheckedChat = (chat) => {\n        const addedChat = {id: chat}\n        this.setState({\n            checkedChats: [...this.state.checkedChats, addedChat]\n        })\n    }\n\n    removeCheckedChat = (chat) => {\n        const filtered = this.state.checkedChats.filter(room => room.id !== chat)        \n        console.log(filtered)\n        this.setState({\n            checkedChats: filtered\n        })\n    }\n\n    deleteChats = () => {\n\n        this.state.checkedChats.map(chat => {\n            console.log(chat.id)\n        })\n\n        // this.props.currentUser.deleteRoom({ roomId: someRoomID })\n        //     .then(() => {\n        //         console.log(`Deleted room with ID: ${someRoomID}`)\n        //     })\n        //     .catch(err => {\n        //         console.log(`Error deleted room ${someRoomID}: ${err}`)\n        //     })\n    }\n\n    seeList = () => {\n        console.log(this.state.checkedChats)\n    }\n\n    render() {\n        const { currentUser } = this.props\n        return (\n            <ul className=\"chatrooms-container\">\n\n            {\n                currentUser ?\n                Object.values(currentUser.rooms).map((room, index) => {\n                    if ( room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45' ) {\n                        return (\n                            <ChatRoomButton key={index} room={room} see={this.seeList} onClick={this.switchChat} check={this.addCheckedChat} uncheck={this.removeCheckedChat}  />\n                        )\n                    }\n                }) : 'Loading...'\n            }\n            </ul>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}