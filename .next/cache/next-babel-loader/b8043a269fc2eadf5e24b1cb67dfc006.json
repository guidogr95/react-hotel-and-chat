{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport { RoomContext } from '../context';\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport RSC from 'react-scrollbars-custom';\n\nvar ChatInstance = /*#__PURE__*/function (_Component) {\n  _inherits(ChatInstance, _Component);\n\n  function ChatInstance(props) {\n    var _this;\n\n    _classCallCheck(this, ChatInstance);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatInstance).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'https://express-login.now.sh/chat/authenticate'\n        })\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this.setState({\n          currentUser: currentUser\n        });\n\n        return currentUser.subscribeToRoom({\n          roomId: _this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: function onMessage(message) {\n              if (_Object$keys(_this.state.currentRoom).length > 0) {\n                _this.setState({\n                  messages: [].concat(_toConsumableArray(_this.state.messages), [message]),\n                  scrollHeight: document.getElementById(\"\".concat(_this.state.currentRoom.createdAt.replace(/[-\\-:]/g, ''))).clientHeight\n                });\n              } else {\n                _this.setState({\n                  messages: [].concat(_toConsumableArray(_this.state.messages), [message])\n                });\n              }\n            },\n            onUserStartedTyping: function onUserStartedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: function onUserStoppedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(function (room) {\n        _this.setState({\n          currentRoom: room\n        });\n      }).then(function () {\n        _this.setState({\n          scrollHeight: document.getElementById(\"\".concat(_this.state.currentRoom.createdAt.replace(/[-\\-:]/g, ''))).clientHeight\n        });\n      })[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendMessage\", function (text) {\n      _this.setState({\n        text: ''\n      });\n\n      _this.state.currentUser.sendSimpleMessage({\n        roomId: _this.state.currentRoom.id,\n        text: text\n      }).then()[\"catch\"](function (err) {\n        console.log('error', err);\n\n        _this.setState({\n          text: text\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (event) {\n      event.preventDefault();\n\n      _this.sendMessage(_this.state.text);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEnterPress\", function (e) {\n      if (e.keyCode == 13 && e.shiftKey == false) {\n        _this.onSubmit(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCursor\", function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.state.currentUser.setReadCursor({\n                roomId: _this.state.currentRoom.id,\n                position: _this.state.messages[_this.state.messages.length - 1].id\n              }).then(function () {\n                console.log('Success!');\n              })[\"catch\"](function (err) {\n                console.log(\"Error setting cursor: \".concat(err));\n              }); // const cursor = await this.state.currentUser.readCursor({\n              //     roomId: this.state.currentRoom.id\n              //   })\n              //   console.log(this.state.currentUser)\n\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false,\n      text: '',\n      scrollHeight: 0\n    };\n    return _this;\n  }\n\n  _createClass(ChatInstance, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.context.activeWindow === this.state.currentRoom.id) {\n        this.onCursor();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        className: this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"chat-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, __jsx(RSC, {\n        scrollTop: this.state.scrollHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, __jsx(\"ul\", {\n        id: this.state.currentRoom.createdAt ? this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '') : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, this.state.messages.map(function (message, index) {\n        var rawId = message.senderId;\n        var Id = rawId.slice(20, rawId.length);\n        return __jsx(\"li\", {\n          className: _this2.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          className: \"chat-msg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          className: \"avatar\",\n          onClick: _this2.onCursor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, _this2.state.currentUser.id == message.senderId ? message.senderId[0] : Id[0]), __jsx(\"div\", {\n          className: \"msg-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, _this2.state.currentUser.id == message.senderId ? message.senderId : Id), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, message.text))));\n      })))), __jsx(\"div\", {\n        className: \"chat-input-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, __jsx(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, __jsx(\"textarea\", {\n        onKeyDown: this.onEnterPress,\n        className: \"hidescroll\",\n        name: \"text\",\n        placeholder: \"Your text...\",\n        onChange: this.handleChange,\n        value: this.state.text,\n        autoComplete: \"off\",\n        wrap: \"hard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"button-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, __jsx(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, __jsx(FaPaperPlane, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ChatInstance;\n}(Component);\n\n_defineProperty(ChatInstance, \"contextType\", RoomContext);\n\nexport { ChatInstance as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js"],"names":["Component","Chatkit","RoomContext","FaPaperPlane","RSC","ChatInstance","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","roomInfo","id","messageLimit","hooks","onMessage","message","state","currentRoom","length","messages","scrollHeight","document","getElementById","createdAt","replace","clientHeight","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","room","error","console","log","text","sendSimpleMessage","err","event","target","value","preventDefault","sendMessage","e","keyCode","shiftKey","onSubmit","setReadCursor","position","context","activeWindow","onCursor","map","index","rawId","senderId","Id","slice","onEnterPress","handleChange"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport { RoomContext } from '../context'\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport RSC from 'react-scrollbars-custom'\n\n\nexport default class ChatInstance extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false,\n            text: '',\n            scrollHeight: 0\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'https://express-login.now.sh/chat/authenticate'\n            })\n        })\n        \n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            if (Object.keys(this.state.currentRoom).length > 0) {\n                                this.setState({\n                                    messages: [...this.state.messages, message],\n                                    scrollHeight: document.getElementById(`${this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '')}`).clientHeight    \n                                })\n                            } else {\n                                this.setState({\n                                    messages: [...this.state.messages, message]\n                                })\n                            }\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => {\n                this.setState({currentRoom:room})\n            })\n            .then(() => {\n                this.setState({scrollHeight: document.getElementById(`${this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '')}`).clientHeight})\n            })\n            .catch(error => console.log('Hiiiii', error))\n            \n        }\n\n    componentDidUpdate() {\n        if ( this.context.activeWindow === this.state.currentRoom.id ) {\n            this.onCursor()\n        }\n    }\n\n    sendMessage = (text) => {\n        this.setState({text:''})\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then()\n        .catch(err => {\n            console.log('error', err);\n            this.setState({text})\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.sendMessage(this.state.text);\n    }\n\n    onEnterPress = (e) => {\n        if(e.keyCode == 13 && e.shiftKey == false) {\n            this.onSubmit(e);\n          }\n    }\n\n    onCursor = async () => {\n        this.state.currentUser.setReadCursor({\n            roomId: this.state.currentRoom.id,\n            position: this.state.messages[this.state.messages.length-1].id\n          })\n            .then(() => {\n              console.log('Success!')\n            })\n            .catch(err => {\n              console.log(`Error setting cursor: ${err}`)\n            })\n\n        // const cursor = await this.state.currentUser.readCursor({\n        //     roomId: this.state.currentRoom.id\n        //   })\n\n        //   console.log(this.state.currentUser)\n    }\n\n    render() {\n        return (\n            <div className={this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"}>\n                \n                <div className=\"chat-messages\" >\n                <RSC scrollTop={this.state.scrollHeight} >\n                    <ul id={ this.state.currentRoom.createdAt ? this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '') : \"\" } >\n                        {this.state.messages.map((message, index) => {\n                            const rawId = message.senderId;\n                            const Id = rawId.slice(20,rawId.length)\n                            return (\n                                <li className={ this.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\" } key={index}>\n                                    <div className=\"chat-msg\">\n                                        <div className=\"avatar\" onClick={this.onCursor} >{ this.state.currentUser.id == message.senderId ? message.senderId[0] : Id[0] }</div>\n                                        <div className=\"msg-content\">\n                                            <span>{this.state.currentUser.id == message.senderId ? message.senderId : Id}</span>\n                                            <p>{message.text}</p>\n                                        </div>\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </RSC>\n                </div>\n                <div className=\"chat-input-text\">\n                    <form onSubmit={this.onSubmit}>\n                            <textarea onKeyDown={this.onEnterPress} className=\"hidescroll\" name=\"text\" placeholder=\"Your text...\" onChange={this.handleChange} value={this.state.text} autoComplete=\"off\" wrap=\"hard\" />\n                            <div className=\"button-container\">\n                                <button type=\"submit\"><FaPaperPlane/></button>\n                            </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}