{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport TypingIndicator from './TypingIndicator';\n\nvar ChatScreen = /*#__PURE__*/function (_Component) {\n  _inherits(ChatScreen, _Component);\n\n  function ChatScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatScreen).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      console.log('mounted', _this.props.currentUsername);\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: _this.props.currentUsername,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this.setState({\n          currentUser: currentUser\n        });\n\n        return currentUser.subscribeToRoom({\n          roomId: 'eadf4af7-69ff-4a59-9dc1-d4c4adcafde4',\n          messageLimit: 100,\n          hooks: {\n            onMessage: function onMessage(message) {\n              console.log(message);\n\n              _this.setState({\n                messages: [].concat(_toConsumableArray(_this.state.messages), [message])\n              });\n            },\n            onUserStartedTyping: function onUserStartedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: function onUserStoppedTyping(user) {\n              _this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(function (currentRoom) {\n        _this.setState({\n          currentRoom: currentRoom\n        });\n      })[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function () {\n      console.log(_this.state.messages);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendMessage\", function (text) {\n      _this.state.currentUser.sendMessage({\n        roomId: _this.state.currentRoom.id,\n        text: text\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendTypingEvent\", function () {\n      _this.state.currentUser.isTypingIn({\n        roomId: _this.state.currentRoom.id\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    });\n\n    _this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Hello \", this.props.currentUsername, __jsx(MessageList, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), this.state.isUserTyping ? __jsx(TypingIndicator, {\n        userTyping: this.state.userTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }) : '', __jsx(SendMessageForm, {\n        onSubmit: this.sendMessage,\n        onChange: this.sendTypingEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatScreen;\n}(Component);\n\nexport { ChatScreen as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js"],"names":["React","Component","Chatkit","MessageList","SendMessageForm","TypingIndicator","ChatScreen","props","console","log","currentUsername","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","messages","state","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","currentRoom","error","text","sendMessage","id","isTypingIn","err","sendTypingEvent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n//Components\nimport MessageList from './MessageList'\nimport SendMessageForm from './SendMessageForm'\nimport TypingIndicator from './TypingIndicator'\n\nexport default class ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        console.log('mounted', this.props.currentUsername);\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: this.props.currentUsername,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: 'eadf4af7-69ff-4a59-9dc1-d4c4adcafde4',\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(currentRoom => {this.setState({currentRoom})})\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    componentDidUpdate = () => {\n        console.log(this.state.messages)\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        })\n    }\n\n    sendTypingEvent = () => {\n        this.state.currentUser.isTypingIn({\n            roomId: this.state.currentRoom.id\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                Hello {this.props.currentUsername}\n                <MessageList messages={this.state.messages}/>\n                { this.state.isUserTyping ? <TypingIndicator userTyping={this.state.userTyping} /> : '' }\n                <SendMessageForm onSubmit={this.sendMessage} onChange={this.sendTypingEvent} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}