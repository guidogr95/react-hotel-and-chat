{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\nexport default class ChatScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: this.props.currentUsername,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        return currentUser.subscribeToRoom({\n          roomId: '3f3bdabe-acff-4165-998d-096fff7eb306',\n          messageLimit: 100,\n          hooks: {\n            onNewMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            }\n          }\n        });\n      }).then(currentRoom => {}).catch(error => console.log('Hiiiii', error));\n    });\n\n    this.state = {\n      messages: []\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Hello \", this.props.currentUsername, __jsx(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js"],"names":["React","Component","Chatkit","MessageList","ChatScreen","constructor","props","chatManager","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","connect","then","currentUser","subscribeToRoom","roomId","messageLimit","hooks","onNewMessage","message","setState","messages","state","currentRoom","catch","error","console","log","render"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAC9CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,+CAOC,MAAM;AACtB,YAAMC,WAAW,GAAG,IAAIL,OAAO,CAACM,WAAZ,CAAwB;AACxCC,QAAAA,eAAe,EAAE,6CADuB;AAExCC,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWK,eAFqB;AAGxCC,QAAAA,aAAa,EAAE,IAAIV,OAAO,CAACW,aAAZ,CAA0B;AACrCC,UAAAA,GAAG,EAAE;AADgC,SAA1B;AAHyB,OAAxB,CAApB;AAQAP,MAAAA,WAAW,CACNQ,OADL,GAEKC,IAFL,CAEUC,WAAW,IAAI;AACjB,eAAOA,WAAW,CAACC,eAAZ,CAA4B;AAC/BC,UAAAA,MAAM,EAAE,sCADuB;AAE/BC,UAAAA,YAAY,EAAE,GAFiB;AAG/BC,UAAAA,KAAK,EAAE;AACHC,YAAAA,YAAY,EAAEC,OAAO,IAAI;AACrB,mBAAKC,QAAL,CAAc;AACVC,gBAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,QAAf,EAAyBF,OAAzB;AADA,eAAd;AAGH;AALE;AAHwB,SAA5B,CAAP;AAWH,OAdL,EAeKP,IAfL,CAeUW,WAAW,IAAI,CAAE,CAf3B,EAgBKC,KAhBL,CAgBWC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB,CAhBpB;AAiBH,KAjCkB;;AAEf,SAAKH,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAE;AADD,KAAb;AAGH;;AA8BDO,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACW,KAAK1B,KAAL,CAAWK,eADtB,EAEI,MAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,KAAKe,KAAL,CAAWD,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AA3C6C","sourcesContent":["import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n//Components\nimport MessageList from './MessageList'\n\nexport default class ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: []\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: this.props.currentUsername,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                return currentUser.subscribeToRoom({\n                    roomId: '3f3bdabe-acff-4165-998d-096fff7eb306',\n                    messageLimit: 100,\n                    hooks: {\n                        onNewMessage: message => {\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        }\n                    }\n                })\n            })\n            .then(currentRoom => {})\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    render() {\n        return (\n            <div>\n                Hello {this.props.currentUsername}\n                <MessageList messages={this.state.messages}/>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}