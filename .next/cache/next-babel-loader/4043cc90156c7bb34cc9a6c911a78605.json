{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport { RoomContext } from '../context';\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport { animateScroll } from 'react-scroll';\nimport RSC from 'react-scrollbars-custom';\nexport default class ChatInstance extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'https://express-login.now.sh/chat/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        return currentUser.subscribeToRoom({\n          roomId: this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n              console.log('message');\n              animateScroll.scrollToBottom({\n                containerId: this.state.currentRoom.id\n              });\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(room => {\n        this.setState({\n          currentRoom: room\n        });\n      }).catch(error => console.log('Hiiiii', error));\n    });\n\n    _defineProperty(this, \"sendMessage\", text => {\n      this.state.currentUser.sendSimpleMessage({\n        roomId: this.state.currentRoom.id,\n        text\n      }).then(messageId => this.setState({\n        text: ''\n      })).catch(err => console.log('error', err));\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", event => {\n      event.preventDefault();\n      this.sendMessage(this.state.text);\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false,\n      text: ''\n    };\n  }\n\n  render() {\n    if (this.state.currentRoom.length === 0) {\n      return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Loading....\");\n    }\n\n    return __jsx(\"div\", {\n      className: this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, __jsx(RSC, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"chat-messages\",\n      id: this.state.currentRoom.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, __jsx(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.state.messages.map((message, index) => {\n      return __jsx(\"li\", {\n        className: this.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"chat-msg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"avatar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, message.senderId[0]), __jsx(\"div\", {\n        className: \"msg-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, message.senderId), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, message.text))));\n    })))), __jsx(\"div\", {\n      className: \"chat-input-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, __jsx(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, __jsx(\"textarea\", {\n      className: \"hidescroll\",\n      name: \"text\",\n      placeholder: \"Your text...\",\n      onChange: this.handleChange,\n      value: this.state.text,\n      autoComplete: \"off\",\n      wrap: \"hard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, __jsx(FaPaperPlane, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\n_defineProperty(ChatInstance, \"contextType\", RoomContext);","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js"],"names":["Component","Chatkit","RoomContext","FaPaperPlane","animateScroll","RSC","ChatInstance","constructor","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","roomInfo","id","messageLimit","hooks","onMessage","message","messages","state","console","log","scrollToBottom","containerId","currentRoom","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","room","catch","error","text","sendSimpleMessage","messageId","err","event","target","value","preventDefault","sendMessage","render","length","context","activeWindow","map","index","senderId","onSubmit","handleChange"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport { RoomContext } from '../context'\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport { animateScroll } from 'react-scroll'\nimport RSC from 'react-scrollbars-custom'\n\n\nexport default class ChatInstance extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false,\n            text: ''\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'https://express-login.now.sh/chat/authenticate'\n            })\n        })\n        \n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                            console.log('message')\n                            animateScroll.scrollToBottom({\n                                containerId: this.state.currentRoom.id\n                            });\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => {this.setState({currentRoom:room})})\n            .catch(error => console.log('Hiiiii', error))\n\n            \n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then(messageId => this.setState({text:''}))\n        .catch(err => console.log('error', err))\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.sendMessage(this.state.text);\n    }\n\n\n    render() {\n        if (this.state.currentRoom.length === 0) {\n            return <p>Loading....</p>\n        }\n        \n        return (\n            <div className={this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"}>\n                <RSC>\n                    <div className=\"chat-messages\" id={this.state.currentRoom.id} >\n                        <ul>\n                            {this.state.messages.map((message, index) => {\n                                \n                                return (\n                                    <li className={ this.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\" } key={index}>\n                                        <div className=\"chat-msg\">\n                                            <div className=\"avatar\">{message.senderId[0]}</div>\n                                            <div className=\"msg-content\">\n                                                <span>{message.senderId}</span>\n                                                <p>{message.text}</p>\n                                            </div>\n                                        </div>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                </RSC>\n                <div className=\"chat-input-text\">\n                    <form onSubmit={this.onSubmit}>\n                            <textarea className=\"hidescroll\" name=\"text\" placeholder=\"Your text...\" onChange={this.handleChange} value={this.state.text} autoComplete=\"off\" wrap=\"hard\" />\n                            <div className=\"button-container\">\n                                <button type=\"submit\"><FaPaperPlane/></button>\n                            </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}