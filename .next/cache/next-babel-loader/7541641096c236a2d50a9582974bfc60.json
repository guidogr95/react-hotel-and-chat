{"ast":null,"code":"var _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport { RoomContext } from '../context';\nexport default class ChatInstance extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: 'guido',\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        this.setState({\n          currentUser\n        });\n        return currentUser.subscribeToRoom({\n          roomId: this.props.roomInfo.id,\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: true\n              });\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                userTyping: user.name,\n                isUserTyping: false\n              });\n            }\n          }\n        });\n      }).then(room => this.setState({\n        currentRoom: room\n      })).catch(error => console.log('Hiiiii', error));\n    });\n\n    _defineProperty(this, \"sendMessage\", text => {\n      this.state.currentUser.sendSimpleMessage({\n        roomId: this.state.currentRoom.id,\n        text\n      }).then(messageId => this.setState({\n        text: ''\n      })).catch(err => console.log('error', err));\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", event => {\n      event.preventDefault();\n      this.sendMessage(this.state.text);\n    });\n\n    this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false,\n      text: ''\n    };\n  }\n\n  render() {\n    const {\n      roomInfo\n    } = this.props.roomInfo;\n\n    if (this.state.currentRoom.length === 0) {\n      return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Loading....\");\n    }\n\n    return __jsx(\"div\", {\n      className: this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.messages.map((message, index) => {\n      return __jsx(\"li\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, message.senderId), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, message.text)));\n    })), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, __jsx(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      name: \"text\",\n      type: \"text\",\n      placeholder: \"Your text...\",\n      onChange: this.handleChange,\n      value: this.state.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Enviar\"))));\n  }\n\n}\n\n_defineProperty(ChatInstance, \"contextType\", RoomContext);","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatInstance.js"],"names":["Component","Chatkit","RoomContext","ChatInstance","constructor","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","subscribeToRoom","roomId","roomInfo","id","messageLimit","hooks","onMessage","message","messages","state","onUserStartedTyping","user","userTyping","name","isUserTyping","onUserStoppedTyping","room","currentRoom","catch","error","console","log","text","sendSimpleMessage","messageId","err","event","target","value","preventDefault","sendMessage","render","length","context","activeWindow","map","index","senderId","onSubmit","handleChange"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport { RoomContext } from '../context';\n\nexport default class ChatInstance extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false,\n            text: ''\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n        \n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => this.setState({currentRoom:room}))\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then(messageId => this.setState({text:''}))\n        .catch(err => console.log('error', err))\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.sendMessage(this.state.text);\n    }\n\n\n    render() {\n        const { roomInfo } = this.props.roomInfo\n        if (this.state.currentRoom.length === 0) {\n            return <p>Loading....</p>\n        }\n        \n        return (\n            <div className={this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"}>\n                <ul>\n                {this.state.messages.map((message, index) => {\n                    return (\n                        <li key={index}>\n                            <div>\n                                <span>{message.senderId}</span>\n                                <p>{message.text}</p>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n            <div>\n                <form onSubmit={this.onSubmit}>\n                        <input name=\"text\" type=\"text\" placeholder=\"Your text...\" onChange={this.handleChange} value={this.state.text}/>\n                        <button type=\"submit\">Enviar</button>\n                </form>\n            </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}