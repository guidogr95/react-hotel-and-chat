{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client'; //Components\n\nimport MessageList from './MessageList';\nimport SendMessageForm from './SendMessageForm';\nimport TypingIndicator from './TypingIndicator';\n\nvar ChatScreen = /*#__PURE__*/function (_Component) {\n  _inherits(ChatScreen, _Component);\n\n  function ChatScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatScreen).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n        userId: _this.props.userId,\n        tokenProvider: new Chatkit.TokenProvider({\n          url: 'http://localhost:3001/authenticate'\n        })\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this.setState({\n          currentUser: currentUser\n        });\n\n        console.log(currentUser);\n        return currentUser.createRoom({\n          id: \"\".concat(currentUser.id, \"-room\"),\n          name: \"\".concat(currentUser.id, \"-room\"),\n          \"private\": true,\n          addUserIds: [currentUser.id, 'guido']\n        }).then(function (room) {\n          _this.setState({\n            currentRoom: room\n          });\n\n          return currentUser.subscribeToRoom({\n            roomId: room.id,\n            messageLimit: 100,\n            hooks: {\n              onMessage: function onMessage(message) {\n                console.log(message);\n\n                _this.setState({\n                  messages: [].concat(_toConsumableArray(_this.state.messages), [message])\n                });\n              },\n              onUserStartedTyping: function onUserStartedTyping(user) {\n                _this.setState({\n                  userTyping: user.name,\n                  isUserTyping: true\n                });\n              },\n              onUserStoppedTyping: function onUserStoppedTyping(user) {\n                _this.setState({\n                  userTyping: user.name,\n                  isUserTyping: false\n                });\n              }\n            }\n          }).then(function () {\n            return _this.state.currentUser.subscribeToRoomMultipart({\n              roomId: '55e8e51c-d811-4cb6-85d6-8960e42057ac',\n              messageLimit: 100,\n              hooks: {\n                onMessage: function onMessage(message) {\n                  console.log(message); // this.updateRooms();\n                }\n              }\n            }).then(function () {\n              _this.state.currentUser.sendSimpleMessage({\n                roomId: '55e8e51c-d811-4cb6-85d6-8960e42057ac',\n                text: 'we'\n              }).then(function (messageId) {\n                return console.log('sent', messageId);\n              })[\"catch\"](function (err) {\n                return console.log('error', err);\n              });\n            });\n          });\n        })[\"catch\"](function (err) {\n          console.log('error', err);\n        }); // return currentUser.subscribeToRoom({\n        //     roomId: 'eadf4af7-69ff-4a59-9dc1-d4c4adcafde4',\n        //     messageLimit: 100,\n        //     hooks: {\n        //         onMessage: (message) => {\n        //             console.log(message)\n        //             this.setState({\n        //                 messages: [...this.state.messages, message]\n        //             })\n        //         },\n        //         onUserStartedTyping: user => {\n        //             this.setState({\n        //                 userTyping: user.name,\n        //                 isUserTyping: true\n        //             })\n        //         },\n        //         onUserStoppedTyping: user => {\n        //             this.setState({\n        //                 userTyping: user.name,\n        //                 isUserTyping: false\n        //             })\n        //         }\n        //     }\n        // })\n      })[\"catch\"](function (error) {\n        return console.log('Hiiiii', error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendMessage\", function (text) {\n      _this.state.currentUser.sendSimpleMessage({\n        roomId: _this.state.currentRoom.id,\n        text: text\n      }).then(function (messageId) {\n        return console.log('sent', messageId);\n      })[\"catch\"](function (err) {\n        return console.log('error', err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendTypingEvent\", function () {\n      _this.state.currentUser.isTypingIn({\n        roomId: _this.state.currentRoom.id\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    });\n\n    _this.state = {\n      messages: [],\n      currentRoom: {},\n      currentUser: {},\n      userTyping: '',\n      isUserTyping: false\n    };\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Hello \", this.props.currentUsername, __jsx(MessageList, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), this.state.isUserTyping ? __jsx(TypingIndicator, {\n        userTyping: this.state.userTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }) : '', __jsx(SendMessageForm, {\n        onSubmit: this.sendMessage,\n        onChange: this.sendTypingEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatScreen;\n}(Component);\n\nexport { ChatScreen as default };","map":{"version":3,"sources":["/home/guido/Documents/GitHub/react-resort/components/ChatScreen.js"],"names":["Component","Chatkit","MessageList","SendMessageForm","TypingIndicator","ChatScreen","props","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","setState","console","log","createRoom","id","name","addUserIds","room","currentRoom","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","messages","state","onUserStartedTyping","user","userTyping","isUserTyping","onUserStoppedTyping","subscribeToRoomMultipart","sendSimpleMessage","text","messageId","err","error","isTypingIn","currentUsername","sendMessage","sendTypingEvent"],"mappings":";;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;IAEqBC,U;;;AACjB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;;AADe,wEAWC,YAAM;AACtB,UAAMC,WAAW,GAAG,IAAIN,OAAO,CAACO,WAAZ,CAAwB;AACxCC,QAAAA,eAAe,EAAE,6CADuB;AAExCC,QAAAA,MAAM,EAAE,MAAKJ,KAAL,CAAWI,MAFqB;AAGxCC,QAAAA,aAAa,EAAE,IAAIV,OAAO,CAACW,aAAZ,CAA0B;AACrCC,UAAAA,GAAG,EAAE;AADgC,SAA1B;AAHyB,OAAxB,CAApB;AAQAN,MAAAA,WAAW,CACNO,OADL,GAEKC,IAFL,CAEU,UAAAC,WAAW,EAAI;AACjB,cAAKC,QAAL,CAAc;AAACD,UAAAA,WAAW,EAAXA;AAAD,SAAd;;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AAEA,eAAOA,WAAW,CAACI,UAAZ,CAAuB;AAC1BC,UAAAA,EAAE,YAAKL,WAAW,CAACK,EAAjB,UADwB;AAE1BC,UAAAA,IAAI,YAAKN,WAAW,CAACK,EAAjB,UAFsB;AAG1B,qBAAS,IAHiB;AAI1BE,UAAAA,UAAU,EAAE,CAACP,WAAW,CAACK,EAAb,EAAiB,OAAjB;AAJc,SAAvB,EAKJN,IALI,CAKC,UAAAS,IAAI,EAAI;AACZ,gBAAKP,QAAL,CAAc;AAAEQ,YAAAA,WAAW,EAAED;AAAf,WAAd;;AACA,iBAAOR,WAAW,CAACU,eAAZ,CAA4B;AACnCC,YAAAA,MAAM,EAAEH,IAAI,CAACH,EADsB;AAEnCO,YAAAA,YAAY,EAAE,GAFqB;AAGnCC,YAAAA,KAAK,EAAE;AACHC,cAAAA,SAAS,EAAE,mBAACC,OAAD,EAAa;AACpBb,gBAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ;;AACA,sBAAKd,QAAL,CAAc;AACVe,kBAAAA,QAAQ,+BAAM,MAAKC,KAAL,CAAWD,QAAjB,IAA2BD,OAA3B;AADE,iBAAd;AAGH,eANE;AAOHG,cAAAA,mBAAmB,EAAE,6BAAAC,IAAI,EAAI;AACzB,sBAAKlB,QAAL,CAAc;AACVmB,kBAAAA,UAAU,EAAED,IAAI,CAACb,IADP;AAEVe,kBAAAA,YAAY,EAAE;AAFJ,iBAAd;AAIH,eAZE;AAaHC,cAAAA,mBAAmB,EAAE,6BAAAH,IAAI,EAAI;AACzB,sBAAKlB,QAAL,CAAc;AACVmB,kBAAAA,UAAU,EAAED,IAAI,CAACb,IADP;AAEVe,kBAAAA,YAAY,EAAE;AAFJ,iBAAd;AAIH;AAlBE;AAH4B,WAA5B,EAuBRtB,IAvBQ,CAuBH,YAAM;AACV,mBAAO,MAAKkB,KAAL,CAAWjB,WAAX,CAAuBuB,wBAAvB,CAAgD;AACnDZ,cAAAA,MAAM,EAAE,sCAD2C;AAEnDC,cAAAA,YAAY,EAAE,GAFqC;AAGnDC,cAAAA,KAAK,EAAE;AACHC,gBAAAA,SAAS,EAAE,mBAACC,OAAD,EAAa;AACpBb,kBAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ,EADoB,CAEpB;AACH;AAJE;AAH4C,aAAhD,EAUJhB,IAVI,CAUC,YAAM;AACV,oBAAKkB,KAAL,CAAWjB,WAAX,CAAuBwB,iBAAvB,CAAyC;AACrCb,gBAAAA,MAAM,EAAE,sCAD6B;AAErCc,gBAAAA,IAAI,EAAE;AAF+B,eAAzC,EAGG1B,IAHH,CAGQ,UAAA2B,SAAS;AAAA,uBAAIxB,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBuB,SAApB,CAAJ;AAAA,eAHjB,WAIO,UAAAC,GAAG;AAAA,uBAAIzB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBwB,GAArB,CAAJ;AAAA,eAJV;AAKH,aAhBM,CAAP;AAiBH,WAzCU,CAAP;AA0CH,SAjDM,WAiDE,UAAAA,GAAG,EAAI;AACZzB,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBwB,GAArB;AACH,SAnDM,CAAP,CAJiB,CAyDjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,OAnFL,WAoFW,UAAAC,KAAK;AAAA,eAAI1B,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsByB,KAAtB,CAAJ;AAAA,OApFhB;AAqFH,KAzGkB;;AAAA,kEA2GL,UAACH,IAAD,EAAU;AACpB,YAAKR,KAAL,CAAWjB,WAAX,CAAuBwB,iBAAvB,CAAyC;AACrCb,QAAAA,MAAM,EAAE,MAAKM,KAAL,CAAWR,WAAX,CAAuBJ,EADM;AAErCoB,QAAAA,IAAI,EAAJA;AAFqC,OAAzC,EAGG1B,IAHH,CAGQ,UAAA2B,SAAS;AAAA,eAAIxB,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBuB,SAApB,CAAJ;AAAA,OAHjB,WAIO,UAAAC,GAAG;AAAA,eAAIzB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBwB,GAArB,CAAJ;AAAA,OAJV;AAKH,KAjHkB;;AAAA,sEAmHD,YAAM;AACpB,YAAKV,KAAL,CAAWjB,WAAX,CAAuB6B,UAAvB,CAAkC;AAC9BlB,QAAAA,MAAM,EAAE,MAAKM,KAAL,CAAWR,WAAX,CAAuBJ;AADD,OAAlC,WAES,UAAAsB,GAAG,EAAI;AACZzB,QAAAA,OAAO,CAACC,GAAR,CAAYwB,GAAZ;AACH,OAJD;AAKH,KAzHkB;;AAEf,UAAKV,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAE,EADD;AAETP,MAAAA,WAAW,EAAE,EAFJ;AAGTT,MAAAA,WAAW,EAAE,EAHJ;AAIToB,MAAAA,UAAU,EAAE,EAJH;AAKTC,MAAAA,YAAY,EAAE;AALL,KAAb;AAFe;AASlB;;;;6BAkHQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACW,KAAK/B,KAAL,CAAWwC,eADtB,EAEI,MAAC,WAAD;AAAa,QAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWD,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGM,KAAKC,KAAL,CAAWI,YAAX,GAA0B,MAAC,eAAD;AAAiB,QAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWG,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA1B,GAAmF,EAHzF,EAII,MAAC,eAAD;AAAiB,QAAA,QAAQ,EAAE,KAAKW,WAAhC;AAA6C,QAAA,QAAQ,EAAE,KAAKC,eAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ;AAQH;;;;EArImChD,S;;SAAnBK,U","sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n//Components\nimport MessageList from './MessageList'\nimport SendMessageForm from './SendMessageForm'\nimport TypingIndicator from './TypingIndicator'\n\nexport default class ChatScreen extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: this.props.userId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                console.log(currentUser)\n\n                return currentUser.createRoom({\n                    id: `${currentUser.id}-room`,\n                    name: `${currentUser.id}-room`,\n                    private: true,\n                    addUserIds: [currentUser.id, 'guido']\n                }).then(room => {\n                    this.setState({ currentRoom: room })\n                    return currentUser.subscribeToRoom({\n                    roomId: room.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                }).then(() => {\n                    return this.state.currentUser.subscribeToRoomMultipart({\n                        roomId: '55e8e51c-d811-4cb6-85d6-8960e42057ac',\n                        messageLimit: 100,\n                        hooks: {\n                            onMessage: (message) => {\n                                console.log(message)\n                                // this.updateRooms();\n                            }\n                        }\n                        \n                    }).then(() => {\n                        this.state.currentUser.sendSimpleMessage({\n                            roomId: '55e8e51c-d811-4cb6-85d6-8960e42057ac',\n                            text: 'we'\n                        }).then(messageId => console.log('sent', messageId))\n                        .catch(err => console.log('error', err))\n                    })\n                })\n                }).catch(err => {\n                    console.log('error', err)\n                })\n\n                // return currentUser.subscribeToRoom({\n                //     roomId: 'eadf4af7-69ff-4a59-9dc1-d4c4adcafde4',\n                //     messageLimit: 100,\n                //     hooks: {\n                //         onMessage: (message) => {\n                //             console.log(message)\n                //             this.setState({\n                //                 messages: [...this.state.messages, message]\n                //             })\n                //         },\n                //         onUserStartedTyping: user => {\n                //             this.setState({\n                //                 userTyping: user.name,\n                //                 isUserTyping: true\n                //             })\n                //         },\n                //         onUserStoppedTyping: user => {\n                //             this.setState({\n                //                 userTyping: user.name,\n                //                 isUserTyping: false\n                //             })\n                //         }\n                //     }\n                // })\n            })\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    sendMessage = (text) => {\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then(messageId => console.log('sent', messageId))\n        .catch(err => console.log('error', err))\n    }\n\n    sendTypingEvent = () => {\n        this.state.currentUser.isTypingIn({\n            roomId: this.state.currentRoom.id\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                Hello {this.props.currentUsername}\n                <MessageList messages={this.state.messages}/>\n                { this.state.isUserTyping ? <TypingIndicator userTyping={this.state.userTyping} /> : '' }\n                <SendMessageForm onSubmit={this.sendMessage} onChange={this.sendTypingEvent} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}