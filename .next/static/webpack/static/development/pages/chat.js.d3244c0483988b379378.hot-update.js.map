{"version":3,"file":"static/webpack/static/development/pages/chat.js.d3244c0483988b379378.hot-update.js","sources":["webpack:///./components/ChatInstance.js"],"sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport { RoomContext } from '../context'\nimport { FaPaperPlane } from \"react-icons/fa\";\nimport RSC from 'react-scrollbars-custom'\n\n\nexport default class ChatInstance extends Component {\n    static contextType = RoomContext;\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false,\n            text: '',\n            scrollHeight: 0\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'https://express-login.now.sh/chat/authenticate'\n            })\n        })\n        \n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            if (Object.keys(this.state.currentRoom).length > 0) {\n                                this.setState({\n                                    messages: [...this.state.messages, message],\n                                    scrollHeight: document.getElementById(`${this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '')}`).clientHeight    \n                                })\n                            } else {\n                                this.setState({\n                                    messages: [...this.state.messages, message]\n                                })\n                            }\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => {\n                this.setState({currentRoom:room})\n            })\n            .then(() => {\n                this.setState({scrollHeight: document.getElementById(`${this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '')}`).clientHeight})\n            })\n            .catch(error => console.log('Hiiiii', error))\n            \n        }\n\n    componentDidUpdate() {\n        if ( this.context.activeWindow === this.state.currentRoom.id && this.state.messages.length > 0 && this.state.currentRoom.unreadCount > 0 ) {\n            console.log('ran')\n            this.onCursor()\n        }\n    }\n\n    sendMessage = (text) => {\n        this.setState({text:''})\n        this.state.currentUser.sendSimpleMessage({\n            roomId: this.state.currentRoom.id,\n            text\n        }).then()\n        .catch(err => {\n            console.log('error', err);\n            this.setState({text})\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.sendMessage(this.state.text);\n    }\n\n    onEnterPress = (e) => {\n        if(e.keyCode == 13 && e.shiftKey == false) {\n            this.onSubmit(e);\n          }\n    }\n    onCursor = () => {\n        this.state.currentUser.setReadCursor({\n            roomId: this.state.currentRoom.id,\n            position: this.state.messages[this.state.messages.length-1].id\n          })\n            .then(() => {\n              console.log('Success!')\n            })\n            .catch(err => {\n              console.log(`Error setting cursor: ${err}`)\n            })\n    }\n\n    render() {\n        return (\n            <div className={this.context.activeWindow === this.state.currentRoom.id ? \"chat-instance\" : \"chat-instance inactive\"}>\n                \n                <div className=\"chat-messages\" >\n                <RSC scrollTop={this.state.scrollHeight} >\n                    <ul id={ this.state.currentRoom.createdAt ? this.state.currentRoom.createdAt.replace(/[-\\-:]/g, '') : \"\" } >\n                        {this.state.messages.map((message, index) => {\n                            const rawId = message.senderId;\n                            const Id = rawId.slice(20,rawId.length)\n                            return (\n                                <li className={ this.state.currentUser.id == message.senderId ? \"admin-style\" : \"customer-style\" } key={index}>\n                                    <div className=\"chat-msg\">\n                                        <div className=\"avatar\" onClick={this.onCursor} >{ this.state.currentUser.id == message.senderId ? message.senderId[0] : Id[0] }</div>\n                                        <div className=\"msg-content\">\n                                            <span>{this.state.currentUser.id == message.senderId ? message.senderId : Id}</span>\n                                            <p>{message.text}</p>\n                                        </div>\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </RSC>\n                </div>\n                <div className=\"chat-input-text\">\n                    <form onSubmit={this.onSubmit}>\n                            <textarea onKeyDown={this.onEnterPress} className=\"hidescroll\" name=\"text\" placeholder=\"Your text...\" onChange={this.handleChange} value={this.state.text} autoComplete=\"off\" wrap=\"hard\" />\n                            <div className=\"button-container\">\n                                <button type=\"submit\"><FaPaperPlane/></button>\n                            </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAxBA;AAHA;AA8BA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAlEA;AA2EA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AArFA;AAuFA;AAGA;AACA;AA3FA;AA6FA;AACA;AAAA;AACA;AACA;AAhGA;AAkGA;AACA;AACA;AACA;AACA;AAtGA;AAuGA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AAuDA;AACA;AACA;AACA;AACA;AACA;;;AA2CA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAxJA;AACA;AADA;AACA;;;;;A","sourceRoot":""}