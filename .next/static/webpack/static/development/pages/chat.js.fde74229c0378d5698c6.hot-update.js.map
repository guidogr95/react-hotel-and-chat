{"version":3,"file":"static/webpack/static/development/pages/chat.js.fde74229c0378d5698c6.hot-update.js","sources":["webpack:///./pages/chat.js"],"sourcesContent":["import { useState, useContext, useEffect } from 'react'\nimport chatImg from '../images/chat.jpg'\nimport loading from '../images/gif/loading-arrow.gif'\nimport axios from 'axios';\nimport { RoomContext } from '../context'\nimport Link from 'next/link';\nimport Chatkit from '@pusher/chatkit-client'\n\n\nexport default function chat() {\n    const context = useContext(RoomContext);\n    const [input, setInput] = useState({});\n    const [btnDisabled, setbtnDisabled] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [currentUser, setCurrentUser] = useState(null);\n    const [currentRoom, setCurrentRoom] = useState({});\n    const style = {\n        backgroundImage: \"url(\"+ chatImg + \")\",\n        height: 600,\n        width: \"100%\",\n        padding: \"150px 0 150px 0\"\n    };\n    const handleChange = (event) => setInput({\n        ...input,\n        [event.target.name]: event.target.value\n    });\n\n    useEffect(() => {\n        context.updateCredentials(true);\n    }, [])\n\n    useEffect(() => {\n        if ( context.authenticated && context.authenticated !== null ) {\n            handleChatSession();\n        } else {\n\n        }\n        \n    }, [context.authenticated])\n    \n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setbtnDisabled(true);\n        axios({\n            url: 'http://localhost:8000/api/users/login',\n            method: 'POST',\n            data: JSON.stringify({\n                email: input.email,\n                password: input.password\n            }),\n            headers: { 'Content-Type': 'application/json'}\n        })\n        .then(res => {\n            setbtnDisabled(false);\n            context.updateCredentials(false, res.data.userId, res.data.email, res.data.token);\n        })\n        .catch(err => {\n            console.log(err);\n            setErrors({\n                ...errors,\n                error: \"No se pudo conectar. Revise sus credenciales\"\n            })\n            setbtnDisabled(false);\n        })\n    }\n\n    const handleChatSession = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: context.chatUserId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n\n        chatManager\n            .connect()\n            .then(currentUser => {\n                setCurrentUser(currentUser)\n                console.log(currentUser)\n                return currentUser.subscribeToRoom({\n                        roomId: '55e8e51c-d811-4cb6-85d6-8960e42057ac',\n                        messageLimit: 100,\n                        hooks: {\n                            onMessage: (message) => {\n                                console.log(message)\n                                // this.updateRooms();\n                            }\n                        }\n                        \n                }).catch(err => console.log(err))\n                // return currentUser.createRoom({\n                //     id: `${currentUser.id}-room`,\n                //     name: `${currentUser.id}-room`,\n                //     private: true,\n                //     addUserIds: [currentUser.id, 'guido']\n                // }).then(room => {\n                //     setCurrentRoom(room)\n                // //     return currentUser.subscribeToRoom({\n                // //     roomId: room.id,\n                // //     messageLimit: 100,\n                // //     hooks: {\n                // //         onMessage: (message) => {\n                // //             console.log(message)\n                // //             this.setState({\n                // //                 messages: [...this.state.messages, message]\n                // //             })\n                // //         },\n                // //         onUserStartedTyping: user => {\n                // //             this.setState({\n                // //                 userTyping: user.name,\n                // //                 isUserTyping: true\n                // //             })\n                // //         },\n                // //         onUserStoppedTyping: user => {\n                // //             this.setState({\n                // //                 userTyping: user.name,\n                // //                 isUserTyping: false\n                // //             })\n                // //         }\n                // //     }\n                // // })\n                // }).catch(err => {\n                //     console.log('error', err)\n                // })\n            })\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    const renderForm = () => {\n        return (\n            <React.Fragment>\n                <h3>Login to Chat</h3>\n                {\n                Object.values(errors).map((err, index) => {\n                    return <div key={index} className=\"login-err\">{err}</div>\n                })\n                }\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"email\">Email</label>\n                    <input type=\"email\" name=\"email\" id=\"email\" onChange={handleChange}/>\n\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" name=\"password\" id=\"password\" onChange={handleChange}/>\n                    <button disabled={btnDisabled} className={btnDisabled?\"btn-primary submit-btn disabled\":\"btn-primary submit-btn\"} type=\"submit\">{\n                        btnDisabled ?\n                        <img className=\"loading-login\" src={loading} alt=\"loading spinner\"/>:\n                        \"Enviar\"\n                    }</button>\n                </form>\n            </React.Fragment>\n        )\n    }\n    const renderLoggedin = () => {\n        return (\n            <div className=\"signed\">\n                <h3>You are logged in</h3>\n                <Link href=\"/\">\n                    <a className=\"btn-primary signed\">\n                        Go Home\n                    </a>\n                </Link>\n                <Link href=\"/admin\">\n                    <a className=\"btn-primary signed\">\n                        Admin Panel\n                    </a>\n                </Link>\n                <ul>\n                {\n                    currentUser ?\n                    Object.values(currentUser.rooms).map((room, index) => {\n                        if ( room.id !== '55e8e51c-d811-4cb6-85d6-8960e42057ac' ) {\n                            return (\n                                <li key={index}>\n                                    <p>{room.id}</p>\n                                </li>\n                            )\n                        }\n                    }) : ''\n                }\n                </ul>\n            </div>\n        )\n    }\n    if (context.authenticated === null) {\n        return (\n            <div style={style}>\n                <div className=\"log-box loading\">\n                <img className=\"loading-spinner\" src={loading} alt=\"loading\"/>\n                </div>\n            </div>\n        )\n    }\n    return (\n        <div style={style}>\n            <div className=\"log-box\">\n                {\n                    context.authenticated ?\n                        renderLoggedin() :\n                        renderForm()\n                }\n            </div>\n        </div>\n    )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAPA;AAUA;AACA;AACA;AAEA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAysourceRoot":""}