{"version":3,"file":"static/webpack/static/development/pages/chat.js.731ce20b59e071f1c5cf.hot-update.js","sources":["webpack:///./components/ChatInstance.js"],"sourcesContent":["import { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n\nexport default class ChatInstance extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            currentRoom: {},\n            currentUser: {},\n            userTyping: '',\n            isUserTyping: false\n        }\n    }\n\n    componentDidMount = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: 'guido',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'http://localhost:3001/authenticate'\n            })\n        })\n        console.log(this.props)\n        chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({currentUser});\n                console.log(currentUser)\n                console.log('roomsInfo',this.props.roomInfo.id)\n                return currentUser.subscribeToRoom({\n                    roomId: this.props.roomInfo.id,\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: (message) => {\n                            console.log(message)\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                        },\n                        onUserStartedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: true\n                            })\n                        },\n                        onUserStoppedTyping: user => {\n                            this.setState({\n                                userTyping: user.name,\n                                isUserTyping: false\n                            })\n                        }\n                    }\n                })\n            })\n            .then(room => this.setState({currentRoom:room}))\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    componentDidUpdate() {\n        console.log(this.state.messages)\n    }\n\n    render() {\n        const { roomInfo } = this.props.roomInfo\n        return (\n            <div className=\"chat-instance\">\n                {\n                    Object.values(this.state.messages).map((message, index) => {\n                        <p key={index}>{message}</p>\n                    })\n                }\n            </div>\n        )\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAYA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAlBA;AAHA;AAwBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AApDA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;AA6CA;AACA;AACA;;;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;;;;AAvEA;AACA;;;;;A","sourceRoot":""}