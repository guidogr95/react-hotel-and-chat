{"version":3,"file":"static/webpack/static/development/pages/chat.js.7999cc1a5e5f841d2c9a.hot-update.js","sources":["webpack:///./pages/chat.js"],"sourcesContent":["import { useState, useContext, useEffect } from 'react'\nimport chatImg from '../images/chat.jpg'\nimport loading from '../images/gif/loading-arrow.gif'\nimport axios from 'axios';\nimport { RoomContext } from '../context'\nimport Chatkit from '@pusher/chatkit-client'\nimport ChatList from '../components/ChatList'\nimport ChatBoard from '../components/ChatBoard'\nimport Head from 'next/head';\n\n\nexport default function chat() {\n    \n    const context = useContext(RoomContext);\n    const [input, setInput] = useState({});\n    const [btnDisabled, setbtnDisabled] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [currentUser, setCurrentUser] = useState(null);\n    const [currentRoom, setCurrentRoom] = useState({});\n    const [chatListActive, setchatListActive] = useState(false)\n    const [value, setValue] = useState(0);\n    const style = {\n        minHeight: 600,\n        width: \"100%\",\n        height: \"calc(100vh - 65px)\",\n        background: \"rgba(175, 154, 125,0.5)\"\n    };\n    const handleChange = (event) => setInput({\n        ...input,\n        [event.target.name]: event.target.value\n    });\n\n    const useForceUpdate = () => {\n        setValue(Math.random);\n    }\n\n    useEffect(() => {\n        context.updateCredentials(true);\n    }, [])\n\n    useEffect(() => {\n        if ( context.authenticated && context.authenticated !== null ) {\n            handleChatSession();\n        } else {\n\n        }\n        \n    }, [context.authenticated])\n    \n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setbtnDisabled(true);\n        axios({\n            url: 'https://express-login.now.sh/api/users/login',\n            method: 'POST',\n            data: JSON.stringify({\n                email: input.email,\n                password: input.password\n            }),\n            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json'}\n        })\n        .then(res => {\n            setbtnDisabled(false);\n            context.updateCredentials(false, res.data.userId, res.data.email, res.data.token);\n        })\n        .catch(err => {\n            setErrors({\n                ...errors,\n                error: \"No se pudo conectar. Revise sus credenciales\"\n            })\n            setbtnDisabled(false);\n        })\n    }\n\n    const setChatListActive = () => {\n        console.log('true')\n        setchatListActive(!chatListActive)\n    }\n\n    const checkNewMsg = () => {\n        let msgs;\n        const title = document.title\n        if ( Object.keys(this.context.currentUser).length > 0 ) {\n            const unreadMsgs = Object.values(this.context.currentUser.rooms).filter(room => room.id !== '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45' && room.unreadCount > 0)\n            console.log(unreadMsgs)\n            console.log(unreadMsgs.length)\n            msgs = unreadMsgs.length\n        }\n    }\n\n    const handleChatSession = () => {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: 'v1:us1:fe088103-8b4d-4e06-a93c-4d2fb3f963be',\n            userId: context.chatUserId,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: 'https://express-login.now.sh/chat/authenticate'\n            })\n        })\n\n        chatManager\n            .connect({\n                onAddedToRoom: () => {\n                    useForceUpdate();\n                },\n                onRoomDeleted: () => {\n                    useForceUpdate();\n                },\n                onNewReadCursor: () => {\n\n                    useForceUpdate();\n                },\n                onRoomUpdated: () => {\n                    useForceUpdate();\n                }\n            })\n            .then(currentUser => {\n                console.log('updated')\n                context.setCurrentUser(currentUser)\n                return currentUser.subscribeToRoom({\n                        roomId: '765b61eb-ad46-4c8b-bd31-2e4d4acc6f45',\n                        messageLimit: 100,\n                        hooks: {\n                            onPresenceChanged: (state, user) => {\n                                // console.log(`User ${user.name} is ${state.current}`)\n                            }\n                        }\n                        \n                }).catch(err => console.log(err))\n            })\n            .catch(error => console.log('Hiiiii', error))\n    }\n\n    const renderForm = () => {\n        return (\n            <React.Fragment>\n                <Head>\n                    <title>Hotel Admin</title>\n                </Head>\n                <h3 className=\"welcome\">Welcome</h3>\n                {\n                Object.values(errors).map((err, index) => {\n                    return <div key={index} className=\"login-err\">{err}</div>\n                })\n                }\n                <form className=\"login-form\" onSubmit={handleSubmit}>\n                    <label htmlFor=\"email\">Email</label>\n                    <input type=\"email\" name=\"email\" id=\"email\" onChange={handleChange}/>\n\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" name=\"password\" id=\"password\" onChange={handleChange}/>\n                    <button disabled={btnDisabled} className={btnDisabled?\"btn-primary submit-btn disabled\":\"btn-primary submit-btn\"} type=\"submit\">{\n                        btnDisabled ?\n                        <img className=\"loading-login\" src={loading} alt=\"loading spinner\"/>:\n                        \"Enviar\"\n                    }</button>\n                </form>\n            </React.Fragment>\n        )\n    }\n    const renderLoggedin = () => {\n        return (\n            <div className=\"signed\">\n                <div className=\"chat-window\">\n                    <ChatList active={chatListActive} setChatListActive={setChatListActive} />\n                    <ChatBoard  setChatListActive={setChatListActive} />\n                </div>\n                \n            </div>\n        )\n    }\n    if (context.authenticated === null) {\n        return (\n            <div style={style}>\n                <div className=\"log-box loading\">\n                <img className=\"loading-spinner\" src={loading} alt=\"loading\"/>\n                </div>\n            </div>\n        )\n    }\n    return (\n        <div style={style}>\n            <div className=\"log-box\">\n                {\n                    context.authenticated ?\n                        renderLoggedin() :\n                        renderForm()\n                }\n            </div>\n        </div>\n    )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAPA;AAUA;AACA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAHA;AAHA;AASA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;A","sourceRoot":""}